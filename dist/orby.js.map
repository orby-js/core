{"version":3,"file":"orby.js","sources":["../src/vdom.js","../src/dom.js","../src/diff.js"],"sourcesContent":["export class VDom {\r\n    /**\r\n     *\r\n     * @param {Function|String} tag - Node component or label\r\n     * @param {Object} props - Properties of the label\r\n     * @param {Array} children - Children assigned to the node\r\n     */\r\n    constructor(tag, props = {}, children = []) {\r\n        this.tag = tag;\r\n        this.props = {\r\n            ...props,\r\n            children\r\n        };\r\n    }\r\n    /**\r\n     * Clone the current node by keeping props and children by default\r\n     * @param {Function|String} tag -  Node component or label\r\n     * @param {*} props - Properties of the label\r\n     * @param {*} children - Children assigned to the node\r\n     */\r\n    clone(tag = this.tag, props = this.props, children = this.props.children) {\r\n        return new VDom(tag, props, children);\r\n    }\r\n    /**\r\n     * Dispatch an existing function in `this.props`\r\n     * @param {String} prop - Property to emit the virtual node only if it exists as a function\r\n     * @param  {...any} args - Arguments to be issued to the function\r\n     */\r\n    emit(prop, ...args) {\r\n        if (this.prevent) return;\r\n        if (prop === \"remove\") this.prevent = true;\r\n        if (typeof this.props[prop] === \"function\") this.props[prop](...args);\r\n    }\r\n}\r\n/**\r\n * Prepare the virtual node\r\n * @param {Function|String} tag\r\n * @param {Object} props\r\n * @param  {...any} children\r\n * @return {VDom}\r\n */\r\nexport function h(tag, props, ...children) {\r\n    return new VDom(tag || \"\", props, concat(children));\r\n}\r\n/**\r\n * Verify if this is a virtual node\r\n * @param {*} value\r\n * @return {Boolean}\r\n */\r\nexport function isVDom(value) {\r\n    return typeof value === \"object\" && value instanceof VDom;\r\n}\r\n/**\r\n * Clean existing values in virtual-dom tree\r\n * @param {*} children\r\n * @param {*} merge\r\n */\r\nexport function concat(children, merge = []) {\r\n    for (let i = 0; i < children.length; i++) {\r\n        let child = children[i];\r\n        Array.isArray(child)\r\n            ? concat(child, merge)\r\n            : merge.push(\r\n                  isVDom(child) ? child : new VDom(\"\", {}, [child || \"\"])\r\n              );\r\n    }\r\n    return merge;\r\n}\r\n","export function create(tag, isSvg) {\r\n    return isSvg\r\n        ? document.createElementNS(\"http://www.w3.org/2000/svg\", tag)\r\n        : tag\r\n        ? document.createElement(tag)\r\n        : document.createTextNode(\"\");\r\n}\r\n\r\nexport function root(parent) {\r\n    return parent.shadowRoot || parent;\r\n}\r\nexport function remove(parent, child) {\r\n    parent.removeChild(child);\r\n}\r\n\r\nexport function append(parent, child) {\r\n    parent.appendChild(child);\r\n}\r\n\r\nexport function replace(parent, newChild, oldChild) {\r\n    parent.replaceChild(newChild, oldChild);\r\n}\r\n","import { VDom, isVDom } from \"./vdom\";\r\nimport { create, remove, append, replace, root } from \"./dom\";\r\nexport { h, isVDom } from \"./vdom\";\r\n\r\nlet attachShadow = \"attachShadow\";\r\n\r\nexport let options = {\r\n    delay: 1\r\n};\r\n/**\r\n * Master is the mark to store the previous state\r\n * and if the node is controlled by one or more components\r\n */\r\nexport let MASTER = \"__master__\";\r\n/**\r\n * Each time a component is removed from the dom,\r\n * the property is marked as true\r\n */\r\nexport let REMOVE = \"__remove__\";\r\n\r\nexport let LISTENER = \"__listeners__\";\r\n/**\r\n * Special properties of virtual dom,\r\n * these are ignored from the diffProps process,\r\n * since it is part of the component's life cycle\r\n */\r\nexport let IGNORE = [\r\n    \"children\",\r\n    \"create\",\r\n    \"created\",\r\n    \"remove\",\r\n    \"removed\",\r\n    \"update\",\r\n    /**\r\n     * It is executed once sent to the diff process to the succesors\r\n     */\r\n    \"updated\",\r\n    /**\r\n     * Create a new context for successors\r\n     */\r\n    \"context\",\r\n    /**\r\n     * Defines the initial state for a component\r\n     */\r\n    \"state\"\r\n];\r\n/**\r\n * It allows to print the status of virtual dom on the planned configuration\r\n * @param {VDom} next - the next state of the node\r\n * @param {HTMLElement} parent - the container of the node\r\n * @param {HTMLElement} [child]  - the ancestor of the node\r\n * @param {Object} [context] - the context of the node\r\n * @param {boolean} [isSvg] - check if the node belongs to a svg unit, to control it as such\r\n * @returns {HTMLElement} - The current node\r\n */\r\nexport function render(next, parent, child, context, isSvg) {\r\n    return diff(root(parent), child, next, context, isSvg);\r\n}\r\n/**\r\n * Gets the node's status mark\r\n * @param {HTMLElement} [base]\r\n * @return {object} - returns an object since the property associated\r\n *                    with the master in the whole diff is decomposed\r\n */\r\nexport function getMaster(base) {\r\n    return (base && base[MASTER]) || {};\r\n}\r\nexport function defer(handler) {\r\n    setTimeout(handler, options.delay);\r\n}\r\n/**\r\n *\r\n * @param {Function} component  - Function that controls the node\r\n * @param {*} [currentState] - The initial state of the component\r\n * @param {Boolean} [isSvg] - Create components for a group of svg\r\n * @return {HTMLElement} - Returns the current component node\r\n */\r\nexport function Component(tag, state, isSvg, deep, key, components) {\r\n    this.tag = tag;\r\n    this.state = state;\r\n    this.context = {};\r\n    this.prevent = false;\r\n    this.render = (parent, base) => {\r\n        let set = state => {\r\n                this.state = state;\r\n                if (!base[REMOVE] && !this.prevent) {\r\n                    this.prevent = true;\r\n                    defer(() => {\r\n                        this.render(parent, base);\r\n                        this.prevent = false;\r\n                    });\r\n                }\r\n            },\r\n            get = () => this.state;\r\n        return (base = diff(\r\n            parent,\r\n            base,\r\n            this.tag(this.props, { set, get }, this.context),\r\n            this.context,\r\n            isSvg,\r\n            deep + 1,\r\n            key + 1,\r\n            components\r\n        ));\r\n    };\r\n}\r\n/**\r\n * It allows to print the status of virtual dom on the planned configuration\r\n * @param {HTMLElement} parent - the container of the node\r\n * @param {HTMLElement} [node]  - the ancestor of the node\r\n * @param {VDom} next - the next state of the node\r\n * @param {Object} [context] - the context of the node\r\n * @param {boolean} [isSvg] - check if the node belongs to a svg unit, to control it as such\r\n * @returns {HTMLElement} - The current node\r\n */\r\n\r\nexport function diff(\r\n    parent,\r\n    node,\r\n    next,\r\n    context = {},\r\n    isSvg,\r\n    deep = 0,\r\n    currentKey = 0,\r\n    currentComponents = {}\r\n) {\r\n    next = isVDom(next) ? next : new VDom(\"\", {}, [next || \"\"]);\r\n\r\n    let base = node,\r\n        { prev = new VDom(), components = currentComponents } = getMaster(base),\r\n        component,\r\n        isCreate,\r\n        addContext = next.props.context;\r\n\r\n    context = addContext ? { ...context, ...addContext } : context;\r\n\r\n    isSvg = next.tag === \"svg\" || isSvg;\r\n    if (prev === next) return base;\r\n\r\n    if (components[currentKey] && components[currentKey].tag !== next.tag) {\r\n        delete components[currentKey];\r\n    }\r\n\r\n    if (typeof next.tag === \"function\") {\r\n        if ((components[currentKey] || {}).tag !== next.tag) {\r\n            components[currentKey] = new Component(\r\n                next.tag,\r\n                next.props.state,\r\n                isSvg,\r\n                deep,\r\n                currentKey,\r\n                components\r\n            );\r\n        }\r\n        component = components[currentKey];\r\n        next = next.clone(prev.tag || (isSvg ? \"g\" : \"\"));\r\n    }\r\n\r\n    let children = next.props.children;\r\n\r\n    if (next.tag !== prev.tag) {\r\n        base = create(next.tag, isSvg);\r\n        if (node) {\r\n            if (!component && next.tag !== \"\") {\r\n                let length = children.length;\r\n                while (node.firstChild) {\r\n                    if (!length--) break;\r\n                    append(base, node.firstChild);\r\n                }\r\n            }\r\n            replace(parent, base, node);\r\n            if (!component && prev.tag) emitRemove(node);\r\n        } else {\r\n            append(parent, base);\r\n        }\r\n        isCreate = true;\r\n        next.emit(\"create\", base);\r\n    }\r\n    if (component) {\r\n        component.props = next.props;\r\n        component.context = context;\r\n        if (deep && component.prevent) {\r\n            return base;\r\n        }\r\n        return component.render(parent, base);\r\n    } else if (!next.tag) {\r\n        if (prev.props.children[0] !== next.props.children[0]) {\r\n            base.textContent = String(next.props.children[0]);\r\n        }\r\n    } else {\r\n        if (\r\n            isCreate ||\r\n            next.emit(\"update\", base, prev.props, next.props) !== false\r\n        ) {\r\n            diffProps(\r\n                base,\r\n                next.tag === prev.tag ? prev.props : {},\r\n                next.props,\r\n                isSvg\r\n            );\r\n            deep++;\r\n            let nextParent = next.props[attachShadow] ? root(base) : base,\r\n                childNodes = Array.from(nextParent.childNodes),\r\n                length = Math.max(childNodes.length, children.length);\r\n            for (let i = 0; i < length; i++) {\r\n                if (children[i]) {\r\n                    diff(\r\n                        nextParent,\r\n                        childNodes[i],\r\n                        children[i],\r\n                        context,\r\n                        isSvg,\r\n                        deep\r\n                    );\r\n                } else {\r\n                    if (childNodes[i]) {\r\n                        emitRemove(childNodes[i]);\r\n                        remove(nextParent, childNodes[i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    base[MASTER] = {\r\n        prev: next,\r\n        components\r\n    };\r\n\r\n    next.emit(isCreate ? \"created\" : \"updated\", base);\r\n\r\n    return base;\r\n}\r\n/**\r\n * Update or delete the attributes and events of a node\r\n * @param {HTMLElement} node - Node to assign changes\r\n * @param {Object} prev - Previous status of attributes\r\n * @param {Object} next - next status of attributes\r\n * @param {Boolean} [isSvg] - If it belongs to svg tree\r\n */\r\nexport function diffProps(node, prev, next, isSvg) {\r\n    let prevKeys = Object.keys(prev),\r\n        nextKeys = Object.keys(next).filter(\r\n            key => prevKeys.indexOf(key) === -1\r\n        ),\r\n        keys = prevKeys.concat(nextKeys);\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n        let prop = keys[i];\r\n        if (IGNORE.indexOf(prop) > -1 || prev[prop] === next[prop]) continue;\r\n\r\n        if (attachShadow === prop && attachShadow in node) {\r\n            node.attachShadow({ mode: next[prop] ? \"open\" : \"closed\" });\r\n        }\r\n        let isFnPrev = typeof prev[prop] === \"function\",\r\n            isFnNext = typeof next[prop] === \"function\";\r\n\r\n        if (isFnPrev || isFnNext) {\r\n            if (!isFnNext && isFnPrev) {\r\n                node.removeEventListener(prop, node[LISTENER][prop][0]);\r\n            }\r\n            if (isFnNext) {\r\n                if (!isFnPrev) {\r\n                    node[LISTENER] = node[LISTENER] || {};\r\n                    if (!node[LISTENER][prop]) {\r\n                        node[LISTENER][prop] = [\r\n                            event => {\r\n                                node[LISTENER][prop][1](event);\r\n                            }\r\n                        ];\r\n                    }\r\n                    node.addEventListener(prop, node[LISTENER][prop][0]);\r\n                }\r\n                node[LISTENER][prop][1] = next[prop];\r\n            }\r\n        } else if (prop in next) {\r\n            if ((prop in node && !isSvg) || (isSvg && prop === \"style\")) {\r\n                if (prop === \"style\") {\r\n                    if (typeof next[prop] === \"object\") {\r\n                        let prevStyle = prev[prop] || {},\r\n                            nextStyle = next[prop];\r\n                        for (let prop in nextStyle) {\r\n                            if (prevStyle[prop] !== nextStyle[prop]) {\r\n                                if (prop[0] === \"-\") {\r\n                                    node.setProperty(prop, nextStyle[prop]);\r\n                                } else {\r\n                                    node.style[prop] = nextStyle[prop];\r\n                                }\r\n                            }\r\n                        }\r\n                        // next[prop] = { ...prevStyle, ...nextStyle };\r\n                    } else {\r\n                        node.style.cssText = next[prop];\r\n                    }\r\n                } else {\r\n                    node[prop] = next[prop];\r\n                }\r\n            } else {\r\n                isSvg\r\n                    ? node.setAttributeNS(null, prop, next[prop])\r\n                    : node.setAttribute(prop, next[prop]);\r\n            }\r\n        } else {\r\n            node.removeAttribute(prop);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Issues the deletion of node and its children\r\n * @param {HTMLElement} base\r\n */\r\nexport function emitRemove(base) {\r\n    let { prev = new VDom() } = getMaster(base),\r\n        children = base.childNodes;\r\n    base[REMOVE] = true;\r\n    prev.emit(\"remove\", base);\r\n    for (let i = 0; i < children.length; i++) {\r\n        emitRemove(children[i]);\r\n    }\r\n    prev.emit(\"removed\", base);\r\n}\r\n"],"names":["VDom","tag","props","children","this","Object","isVDom","value","root","parent","shadowRoot","remove","child","removeChild","append","appendChild","clone","emit","prop","prevent","ref","args","let","attachShadow","options","delay","MASTER","REMOVE","LISTENER","IGNORE","getMaster","base","Component","state","isSvg","deep","key","components","context","render","diff","setTimeout","node","next","currentKey","currentComponents","component","isCreate","addContext","prev","document","createElementNS","createElement","createTextNode","create","length","firstChild","newChild","oldChild","replaceChild","replace","emitRemove","prevKeys","keys","nextKeys","filter","indexOf","concat","i","mode","isFnPrev","isFnNext","removeEventListener","event","addEventListener","prevStyle","nextStyle","setProperty","style","cssText","setAttributeNS","setAttribute","removeAttribute","diffProps","nextParent","childNodes","Array","from","Math","max","textContent","String","merge","isArray","push"],"mappings":"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"}