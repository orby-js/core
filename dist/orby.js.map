{"version":3,"file":"orby.js","sources":["../src/vdom.js","../src/diff.js","../src/dom.js"],"sourcesContent":["export class VDom {\r\n    /**\r\n     *\r\n     * @param {Function|String} tag - Node component or label\r\n     * @param {Object} props - Properties of the label\r\n     * @param {Array} children - Children assigned to the node\r\n     */\r\n    constructor(tag, props = {}, children = []) {\r\n        this.tag = tag;\r\n        this.props = {\r\n            ...props,\r\n            children\r\n        };\r\n        this.key = this.props.key;\r\n    }\r\n    /**\r\n     * Clone the current node by keeping props and children by default\r\n     * @param {Function|String} tag -  Node component or label\r\n     * @param {*} props - Properties of the label\r\n     * @param {*} children - Children assigned to the node\r\n     */\r\n    clone(tag = this.tag, props = this.props, children = this.props.children) {\r\n        return new VDom(tag, props, children);\r\n    }\r\n}\r\n/**\r\n * Prepare the virtual node\r\n * @param {Function|String} tag\r\n * @param {Object} props\r\n * @param  {...any} children\r\n * @return {VDom}\r\n */\r\nexport function h(tag, props, ...children) {\r\n    return new VDom(tag || \"\", props, concat(children));\r\n}\r\n/**\r\n * Clean existing values in virtual-dom tree\r\n * @param {*} children\r\n * @param {*} merge\r\n */\r\nexport function concat(children, next = []) {\r\n    for (let i = 0; i < children.length; i++) {\r\n        let value = children[i];\r\n        Array.isArray(value) ? concat(value, next) : next.push(value);\r\n    }\r\n    return next;\r\n}\r\n","import { VDom } from \"./vdom\";\r\nimport { create, remove, append, replace, root } from \"./dom\";\r\nexport { h } from \"./vdom\";\r\n\r\nlet CURRENT_COMPONENT;\r\nlet CURRENT_KEY_STATE;\r\n\r\nexport let options = {\r\n    delay: 1\r\n};\r\n\r\nexport let COMPONENTS = \"__components__\";\r\n\r\n/**\r\n * Master is the mark to store the previous state\r\n * and if the node is controlled by one or more components\r\n */\r\nexport let PREVIOUS = \"__previous__\";\r\n/**\r\n * Each time a component is removed from the dom,\r\n * the property is marked as true\r\n */\r\nexport let REMOVE = \"__remove__\";\r\n\r\nexport let LISTENERS = \"__listeners__\";\r\n\r\n/**\r\n * Special properties of virtual dom,\r\n * these are ignored from the diffProps process,\r\n * since it is part of the component's life cycle\r\n */\r\n\r\nexport let IGNORE = /^(context|state|children|(create|update|remove)(d){0,1}|xmlns|key)$/;\r\n/**\r\n * It allows to print the status of virtual dom on the planned configuration\r\n * @param {VDom} next - the next state of the node\r\n * @param {HTMLElement} parent - the container of the node\r\n * @param {HTMLElement} [child]  - the ancestor of the node\r\n * @param {object} [context] - the context of the node\r\n * @param {boolean} [isSvg] - check if the node belongs to a svg unit, to control it as such\r\n * @returns {HTMLElement} - The current node\r\n */\r\nexport function render(next, parent, child, context, isSvg) {\r\n    return diff(root(parent), child, next, context, isSvg);\r\n}\r\n/**\r\n * execute a callback based on setTimeout, this is to avoid an\r\n * overload before the mamipulation of the state\r\n * @param {Function} handler\r\n */\r\nexport function defer(handler) {\r\n    setTimeout(handler, options.delay);\r\n}\r\n/**\r\n * It allows to execute a property of the virtual-dom,\r\n * this function has a use focused on the life cycle of the node\r\n * @param {VDom} vdom\r\n * @param {string} prop\r\n * @param  {...any} args\r\n */\r\nexport function emit(vdom, prop, ...args) {\r\n    if (vdom.removed) return;\r\n    if (vdom.remove && prop !== \"removed\") return;\r\n    if (prop === \"remove\") vdom.remove = true;\r\n    if (prop === \"removed\") vdom.removed = true;\r\n    if (vdom.props[prop]) vdom.props[prop](...args);\r\n}\r\n/**\r\n * Allows you to add an observer status of changes to the functional component\r\n * @param {*} initialState - Initial state to register\r\n */\r\nexport function useState(initialState) {\r\n    let key = CURRENT_KEY_STATE++,\r\n        use = CURRENT_COMPONENT;\r\n    if (!(key in use.states)) {\r\n        use.states.push(\r\n            typeof initialState === \"function\" ? initialState() : initialState\r\n        );\r\n    }\r\n    return [\r\n        use.states[key],\r\n        nextState => {\r\n            use.states[key] = nextState;\r\n            if (use.prevent) return;\r\n            defer(() => {\r\n                use.render();\r\n                use.prevent = false;\r\n            });\r\n            use.prevent = true;\r\n        },\r\n        () => use.states[key]\r\n    ];\r\n}\r\n/**\r\n * allows to add an observer effect before the changes of the component\r\n * @param {Function} handler\r\n */\r\nexport function useEffect(handler) {\r\n    CURRENT_COMPONENT.effects[0].push(handler);\r\n}\r\n/**\r\n *\r\n * @param {Function} component  - Function that controls the node\r\n * @param {boolean} isSvg - Create components for a group of svg\r\n * @param {number} deep - Depth of the component\r\n * @param {number} currentKey - current depth level\r\n * @param {object} currentComponents\r\n */\r\nexport class Component {\r\n    constructor(tag, isSvg, deep, currentComponents) {\r\n        this.base;\r\n        this.parent;\r\n        this.tag = tag;\r\n        this.props = {};\r\n        this.states = [];\r\n        this.effects = [];\r\n        this.context = {};\r\n        this.prevent = false;\r\n        this.render = rebuild => {\r\n            //if (this.prevent) return this.base;\r\n            if (this.base[REMOVE]) return;\r\n\r\n            CURRENT_KEY_STATE = 0;\r\n            CURRENT_COMPONENT = this;\r\n\r\n            this.effects = [[], []];\r\n\r\n            let nextStateRender = tag(this.props, this.context);\r\n\r\n            CURRENT_COMPONENT = false;\r\n\r\n            this.base = diff(\r\n                this.parent,\r\n                this.base,\r\n                nextStateRender,\r\n                this.context,\r\n                isSvg,\r\n                rebuild,\r\n                deep + 1,\r\n                currentComponents\r\n            );\r\n\r\n            this.effects[1] = this.effects[0].map(handler => handler());\r\n\r\n            return this.base;\r\n        };\r\n    }\r\n}\r\n/**\r\n * It allows to print the status of virtual dom on the planned configuration\r\n * @param {HTMLElement} parent - the container of the node\r\n * @param {HTMLElement} [node]  - the ancestor of the node\r\n * @param {VDom} next - the next state of the node\r\n * @param {Object} [context] - the context of the node\r\n * @param {boolean} [isSvg] - check if the node belongs to a svg unit, to control it as such\r\n * @param {number} [deep] - this is a depth marker used to generate an index to store the state of the component\r\n * @param {number} [currentKey] - when generating a component of high order, it has a currentKey\r\n *                                other than 0, this allows to point to the state of the component correctly\r\n * @param {object} [currentComponents] - the functional components are stored in an object created by the first component\r\n * @returns {HTMLElement} - The current node\r\n */\r\n\r\nexport function diff(\r\n    parent,\r\n    node,\r\n    next,\r\n    context = {},\r\n    isSvg,\r\n    rebuild,\r\n    deep = 0,\r\n    currentComponents = []\r\n) {\r\n    let prev = (node && node[PREVIOUS]) || new VDom(),\r\n        components = (node && node[COMPONENTS]) || currentComponents,\r\n        base = node,\r\n        isCreate,\r\n        component,\r\n        withUpdate = true;\r\n\r\n    if (prev === next) return base;\r\n\r\n    if (!(next instanceof VDom)) {\r\n        next = new VDom(\"\", {}, next);\r\n    }\r\n\r\n    let children = next.props.children,\r\n        addContext = next.props.context;\r\n\r\n    context = addContext ? { ...context, ...addContext } : context;\r\n\r\n    isSvg = next.tag === \"svg\" || isSvg;\r\n\r\n    /**\r\n     *\r\n     */\r\n    if (components[deep] && components[deep].tag !== next.tag) {\r\n        removeComponents(components.splice(deep));\r\n    }\r\n\r\n    if (typeof next.tag === \"function\") {\r\n        if ((components[deep] || {}).tag !== next.tag) {\r\n            components[deep] = new Component(next.tag, isSvg, deep, components);\r\n        }\r\n        component = components[deep];\r\n        next = next.clone(prev.tag || \"\");\r\n    }\r\n\r\n    if (prev.tag !== next.tag) {\r\n        base = create(next.tag, isSvg);\r\n        if (node) {\r\n            if (!component && next.tag) {\r\n                let length = children.length;\r\n                while (node.firstChild) {\r\n                    if (!length--) break;\r\n                    append(base, node.firstChild);\r\n                }\r\n            }\r\n            if (!component && prev.tag) {\r\n                recollectNodeTree(node);\r\n            }\r\n            replace(parent, base, node);\r\n        } else {\r\n            append(parent, base);\r\n        }\r\n        isCreate = true;\r\n        if (!component) emit(next, \"create\", base);\r\n    }\r\n\r\n    if (component) {\r\n        component.base = base;\r\n        component.parent = parent;\r\n        component.props = next.props;\r\n        component.context = context;\r\n\r\n        //if (deep && component.prevent) {\r\n        if (component.prevent) {\r\n            return component.base;\r\n        }\r\n\r\n        return component.render(rebuild);\r\n    } else if (next.tag) {\r\n        withUpdate =\r\n            emit(next, \"update\", base, prev.props, next.props) !== false;\r\n        if (isCreate || withUpdate) {\r\n            diffProps(\r\n                base,\r\n                prev.tag === next.tag ? prev.props : {},\r\n                next.props,\r\n                isSvg\r\n            );\r\n            let nextParent = next.props.scoped ? root(base) : base,\r\n                childNodes = nextParent.childNodes,\r\n                move = 0,\r\n                length,\r\n                ignore = {},\r\n                prevChildrenKeys = {};\r\n\r\n            for (let i = 0; i < childNodes.length; i++) {\r\n                let childNode = childNodes[i],\r\n                    prev = childNode[PREVIOUS],\r\n                    key = prev && prev.key !== undefined ? prev.key : i;\r\n                prevChildrenKeys[key] = childNode;\r\n            }\r\n\r\n            for (let i = 0; i < children.length; i++) {\r\n                let child = children[i],\r\n                    useChildKey =\r\n                        child instanceof VDom && child.key !== undefined,\r\n                    key = useChildKey ? child.key : i,\r\n                    childNode = prevChildrenKeys[key];\r\n                diff(\r\n                    nextParent,\r\n                    childNode,\r\n                    child,\r\n                    context,\r\n                    isSvg,\r\n                    useChildKey ? child.key !== key : rebuild\r\n                );\r\n                delete prevChildrenKeys[key];\r\n            }\r\n\r\n            for (let key in prevChildrenKeys) {\r\n                let childNode = prevChildrenKeys[key];\r\n                recollectNodeTree(childNode);\r\n                remove(nextParent, childNode);\r\n            }\r\n        }\r\n    } else {\r\n        if (prev.props.children !== next.props.children) {\r\n            base.textContent = next.props.children;\r\n        }\r\n    }\r\n\r\n    base[PREVIOUS] = withUpdate ? next : prev;\r\n    base[COMPONENTS] = components;\r\n\r\n    emit(next, isCreate ? \"created\" : \"updated\", base);\r\n\r\n    return base;\r\n}\r\n/**\r\n * Update or delete the attributes and events of a node\r\n * @param {HTMLElement} node - Node to assign changes\r\n * @param {Object} prev - Previous status of attributes\r\n * @param {Object} next - next status of attributes\r\n * @param {Boolean} [isSvg] - If it belongs to svg tree\r\n */\r\nexport function diffProps(node, prev, next, isSvg) {\r\n    let prevKeys = Object.keys(prev),\r\n        nextKeys = Object.keys(next),\r\n        keys = prevKeys.concat(nextKeys),\r\n        define = {};\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n        let prop = keys[i];\r\n\r\n        if (define[prop] || prev[prop] === next[prop] || IGNORE.test(prop))\r\n            continue;\r\n\r\n        define[prop] = true;\r\n\r\n        if (\"scoped\" === prop && \"attachShadow\" in node) {\r\n            node.attachShadow({ mode: next[prop] ? \"open\" : \"closed\" });\r\n            continue;\r\n        }\r\n\r\n        let isFnPrev = typeof prev[prop] === \"function\",\r\n            isFnNext = typeof next[prop] === \"function\";\r\n\r\n        if (isFnPrev || isFnNext) {\r\n            if (!isFnNext && isFnPrev) {\r\n                node.removeEventListener(prop, node[LISTENERS][prop][0]);\r\n            }\r\n            if (isFnNext) {\r\n                if (!isFnPrev) {\r\n                    node[LISTENERS] = node[LISTENERS] || {};\r\n                    if (!node[LISTENERS][prop]) {\r\n                        node[LISTENERS][prop] = [\r\n                            event => {\r\n                                node[LISTENERS][prop][1](event);\r\n                            }\r\n                        ];\r\n                    }\r\n                    node.addEventListener(prop, node[LISTENERS][prop][0]);\r\n                }\r\n                node[LISTENERS][prop][1] = next[prop];\r\n            }\r\n        } else if (prop in next) {\r\n            if ((prop in node && !isSvg) || (isSvg && prop === \"style\")) {\r\n                if (prop === \"style\") {\r\n                    if (typeof next[prop] === \"object\") {\r\n                        let prevStyle = prev[prop] || {},\r\n                            nextStyle = next[prop];\r\n                        for (let prop in nextStyle) {\r\n                            if (prevStyle[prop] !== nextStyle[prop]) {\r\n                                if (prop[0] === \"-\") {\r\n                                    node.style.setProperty(\r\n                                        prop,\r\n                                        nextStyle[prop]\r\n                                    );\r\n                                } else {\r\n                                    node.style[prop] = nextStyle[prop];\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        node.style.cssText = next[prop];\r\n                    }\r\n                } else {\r\n                    node[prop] = next[prop];\r\n                }\r\n            } else {\r\n                isSvg\r\n                    ? node.setAttributeNS(null, prop, next[prop])\r\n                    : node.setAttribute(prop, next[prop]);\r\n            }\r\n        } else {\r\n            node.removeAttribute(prop);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Issues the deletion of node and its children\r\n * @param {HTMLElement} node\r\n */\r\nexport function recollectNodeTree(node) {\r\n    let prev = node[PREVIOUS],\r\n        components = node[COMPONENTS],\r\n        children = node.childNodes;\r\n\r\n    if (!prev) return;\r\n\r\n    node[REMOVE] = true;\r\n\r\n    emit(prev, \"remove\", node);\r\n\r\n    removeComponents(components);\r\n\r\n    for (let i = 0; i < children.length; i++) {\r\n        recollectNodeTree(children[i]);\r\n    }\r\n\r\n    emit(prev, \"removed\", node);\r\n}\r\n\r\nexport function removeComponents(components) {\r\n    for (let i = 0; i < components.length; i++) {\r\n        let component = components[i],\r\n            effectsRemove = component.effects[1];\r\n        for (let i = 0; i < effectsRemove.length; i++) {\r\n            if (effectsRemove[i]) effectsRemove[i]();\r\n        }\r\n    }\r\n}\r\n","export function create(tag, isSvg) {\r\n    if (tag) {\r\n        return isSvg\r\n            ? document.createElementNS(\"http://www.w3.org/2000/svg\", tag)\r\n            : document.createElement(tag);\r\n    } else {\r\n        return document.createTextNode(\"\");\r\n    }\r\n}\r\n\r\nexport function root(parent) {\r\n    return parent.shadowRoot || parent;\r\n}\r\nexport function remove(parent, child) {\r\n    parent.removeChild(child);\r\n}\r\n\r\nexport function append(parent, child) {\r\n    parent.appendChild(child);\r\n}\r\n\r\nexport function replace(parent, newChild, oldChild) {\r\n    parent.replaceChild(newChild, oldChild);\r\n}\r\n"],"names":["CURRENT_COMPONENT","CURRENT_KEY_STATE","VDom","tag","props","children","this","Object","key","root","parent","shadowRoot","remove","child","removeChild","append","appendChild","clone","options","delay","COMPONENTS","PREVIOUS","REMOVE","LISTENERS","IGNORE","emit","vdom","prop","removed","ref","args","Component","isSvg","deep","currentComponents","states","effects","context","prevent","render","rebuild","base","let","nextStateRender","diff","map","handler","node","next","isCreate","component","prev","components","withUpdate","addContext","removeComponents","splice","document","createElementNS","createElement","createTextNode","create","length","firstChild","recollectNodeTree","newChild","oldChild","replaceChild","replace","prevKeys","keys","nextKeys","concat","define","i","test","attachShadow","mode","isFnPrev","isFnNext","removeEventListener","event","addEventListener","prevStyle","nextStyle","style","setProperty","cssText","setAttributeNS","setAttribute","removeAttribute","diffProps","nextParent","scoped","childNodes","prevChildrenKeys","childNode","undefined","useChildKey","textContent","effectsRemove","value","Array","isArray","push","initialState","use","nextState","setTimeout"],"mappings":"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"}