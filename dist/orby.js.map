{"version":3,"file":"orby.js","sources":["../src/vdom.js","../src/dom.js","../src/diff.js"],"sourcesContent":["export class VDom {\r\n    /**\r\n     *\r\n     * @param {Function|String} tag - Node component or label\r\n     * @param {Object} props - Properties of the label\r\n     * @param {Array} children - Children assigned to the node\r\n     */\r\n    constructor(tag, props = {}, children = []) {\r\n        this.tag = tag;\r\n        this.props = {\r\n            ...props,\r\n            children\r\n        };\r\n    }\r\n    /**\r\n     * Clone the current node by keeping props and children by default\r\n     * @param {Function|String} tag -  Node component or label\r\n     * @param {*} props - Properties of the label\r\n     * @param {*} children - Children assigned to the node\r\n     */\r\n    clone(tag = this.tag, props = this.props, children = this.props.children) {\r\n        return new VDom(tag, props, children);\r\n    }\r\n    /**\r\n     * Dispatch an existing function in `this.props`\r\n     * @param {String} prop - Property to emit the virtual node only if it exists as a function\r\n     * @param  {...any} args - Arguments to be issued to the function\r\n     */\r\n    emit(prop, ...args) {\r\n        if (this.prevent) return;\r\n        if (prop === \"remove\") this.prevent = true;\r\n        if (typeof this.props[prop] === \"function\") this.props[prop](...args);\r\n    }\r\n}\r\n/**\r\n * Prepare the virtual node\r\n * @param {Function|String} tag\r\n * @param {Object} props\r\n * @param  {...any} children\r\n * @return {VDom}\r\n */\r\nexport function h(tag, props, ...children) {\r\n    return new VDom(tag || \"\", props, concat(children));\r\n}\r\n/**\r\n * Verify if this is a virtual node\r\n * @param {*} value\r\n * @return {Boolean}\r\n */\r\nexport function isVDom(value) {\r\n    return typeof value === \"object\" && value instanceof VDom;\r\n}\r\n/**\r\n * Clean existing values in virtual-dom tree\r\n * @param {*} children\r\n * @param {*} merge\r\n */\r\nexport function concat(children, merge = []) {\r\n    for (let i = 0; i < children.length; i++) {\r\n        let child = children[i];\r\n        Array.isArray(child)\r\n            ? concat(child, merge)\r\n            : merge.push(\r\n                  isVDom(child) ? child : new VDom(\"\", {}, [child || \"\"])\r\n              );\r\n    }\r\n    return merge;\r\n}\r\n","export function create(tag, isSvg) {\r\n    return isSvg\r\n        ? document.createElementNS(\"http://www.w3.org/2000/svg\", tag)\r\n        : tag\r\n        ? document.createElement(tag)\r\n        : document.createTextNode(\"\");\r\n}\r\n\r\nexport function root(parent) {\r\n    return parent.shadowRoot || parent;\r\n}\r\nexport function remove(parent, child, useShadowRoot) {\r\n    parent.removeChild(child);\r\n}\r\n\r\nexport function append(parent, child, useShadowRoot) {\r\n    parent.appendChild(child);\r\n}\r\n\r\nexport function replace(parent, newChild, oldChild, useShadowRoot) {\r\n    parent.replaceChild(newChild, oldChild);\r\n}\r\n","import { VDom, isVDom } from \"./vdom\";\r\nimport { create, remove, append, replace, root } from \"./dom\";\r\nexport { h, isVDom } from \"./vdom\";\r\n\r\nexport let options = {\r\n    delay: 1\r\n};\r\n/**\r\n * Master is the mark to store the previous state\r\n * and if the node is controlled by one or more components\r\n */\r\nexport let MASTER = \"__master__\";\r\n/**\r\n * Each time a component is removed from the dom,\r\n * the property is marked as true\r\n */\r\nexport let REMOVE = \"__remove__\";\r\n\r\nexport let LISTENER = \"__listeners__\";\r\n/**\r\n * Special properties of virtual dom,\r\n * these are ignored from the diffProps process,\r\n * since it is part of the component's life cycle\r\n */\r\nexport let IGNORE = [\r\n    \"children\",\r\n    \"create\",\r\n    \"created\",\r\n    \"remove\",\r\n    \"removed\",\r\n    \"update\",\r\n    /**\r\n     * It is executed once sent to the diff process to the succesors\r\n     */\r\n    \"updated\",\r\n    /**\r\n     * Create a new context for successors\r\n     */\r\n    \"context\",\r\n    /**\r\n     * Defines the initial state for a component\r\n     */\r\n    \"state\",\r\n    /**\r\n     * It allows to avoid the execution of the\r\n     * component the same type of label that\r\n     * its predecessor is conserved\r\n     */\r\n    \"static\"\r\n];\r\n/**\r\n * It allows to print the status of virtual dom on the planned configuration\r\n * @param {VDom} next - the next state of the node\r\n * @param {HTMLElement} parent - the container of the node\r\n * @param {HTMLElement} [child]  - the ancestor of the node\r\n * @param {Object} [context] - the context of the node\r\n * @param {boolean} [isSvg] - check if the node belongs to a svg unit, to control it as such\r\n * @returns {HTMLElement} - The current node\r\n */\r\nexport function render(next, parent, child, context, isSvg) {\r\n    return diff(root(parent), child, next, context, isSvg);\r\n}\r\n/**\r\n * Gets the node's status mark\r\n * @param {HTMLElement} [base]\r\n * @return {object} - returns an object since the property associated\r\n *                    with the master in the whole diff is decomposed\r\n */\r\nexport function getMaster(base) {\r\n    return (base && base[MASTER]) || {};\r\n}\r\nexport function defer(handler) {\r\n    setTimeout(handler, options.delay);\r\n}\r\n/**\r\n *\r\n * @param {Function} component  - Function that controls the node\r\n * @param {*} [currentState] - The initial state of the component\r\n * @param {Boolean} [isSvg] - Create components for a group of svg\r\n * @return {HTMLElement} - Returns the current component node\r\n */\r\nexport function Component(tag, state, isSvg, deep, key, components) {\r\n    this.tag = tag;\r\n    this.state = state;\r\n    this.context = {};\r\n    this.prevent = false;\r\n    this.render = (parent, base) => {\r\n        let set = state => {\r\n                this.state = state;\r\n                if (!base[REMOVE] && !this.prevent) {\r\n                    this.prevent = true;\r\n                    defer(() => {\r\n                        this.render(parent, base);\r\n                        this.prevent = false;\r\n                    });\r\n                }\r\n            },\r\n            get = () => this.state;\r\n        return (base = diff(\r\n            parent,\r\n            base,\r\n            this.tag(this.props, { set, get }, this.context),\r\n            this.context,\r\n            isSvg,\r\n            deep + 1,\r\n            key + 1,\r\n            components\r\n        ));\r\n    };\r\n}\r\n/**\r\n * It allows to print the status of virtual dom on the planned configuration\r\n * @param {HTMLElement} parent - the container of the node\r\n * @param {HTMLElement} [node]  - the ancestor of the node\r\n * @param {VDom} next - the next state of the node\r\n * @param {Object} [context] - the context of the node\r\n * @param {boolean} [isSvg] - check if the node belongs to a svg unit, to control it as such\r\n * @returns {HTMLElement} - The current node\r\n */\r\n\r\nexport function diff(\r\n    parent,\r\n    node,\r\n    next,\r\n    context = {},\r\n    isSvg,\r\n    deep = 0,\r\n    currentKey = 0,\r\n    currentComponents = {}\r\n) {\r\n    next = isVDom(next) ? next : new VDom(\"\", {}, [next || \"\"]);\r\n\r\n    let base = node,\r\n        { prev = new VDom(), components = currentComponents } = getMaster(base),\r\n        component,\r\n        isCreate,\r\n        addContext = next.props.context;\r\n\r\n    context = addContext ? { ...context, ...addContext } : context;\r\n\r\n    isSvg = next.tag === \"svg\" || isSvg;\r\n    if (prev === next || (prev.tag && next.tag && next.props.static))\r\n        return base;\r\n\r\n    if (components[currentKey] && components[currentKey].tag !== next.tag) {\r\n        delete components[currentKey];\r\n    }\r\n\r\n    if (typeof next.tag === \"function\") {\r\n        if ((components[currentKey] || {}).tag !== next.tag) {\r\n            components[currentKey] = new Component(\r\n                next.tag,\r\n                next.props.state,\r\n                isSvg,\r\n                deep,\r\n                currentKey,\r\n                components\r\n            );\r\n        }\r\n        component = components[currentKey];\r\n        next = next.clone(prev.tag || (isSvg ? \"g\" : \"\"));\r\n    }\r\n\r\n    let children = next.props.children;\r\n\r\n    if (next.tag !== prev.tag) {\r\n        base = create(next.tag, isSvg);\r\n        if (node) {\r\n            if (!component && next.tag !== \"\") {\r\n                let length = children.length;\r\n                while (node.firstChild) {\r\n                    if (!length--) break;\r\n                    append(base, node.firstChild);\r\n                }\r\n            }\r\n            replace(parent, base, node);\r\n            if (!component) emitRemove(node);\r\n        } else {\r\n            append(parent, base);\r\n        }\r\n        isCreate = true;\r\n        next.emit(\"create\", base);\r\n    }\r\n    if (component) {\r\n        component.props = next.props;\r\n        component.context = context;\r\n        if (deep && component.prevent) {\r\n            return base;\r\n        }\r\n        return component.render(parent, base);\r\n    } else if (!next.tag) {\r\n        if (prev.props.children[0] !== next.props.children[0]) {\r\n            base.textContent = String(next.props.children[0]);\r\n        }\r\n    } else {\r\n        if (\r\n            isCreate ||\r\n            next.emit(\"update\", base, prev.props, next.props) !== false\r\n        ) {\r\n            diffProps(\r\n                base,\r\n                next.tag === prev.tag ? prev.props : {},\r\n                next.props,\r\n                isSvg\r\n            );\r\n            deep++;\r\n            let childNodes = Array.from(root(base).childNodes),\r\n                length = Math.max(childNodes.length, children.length);\r\n            for (let i = 0; i < length; i++) {\r\n                if (children[i]) {\r\n                    diff(\r\n                        base,\r\n                        childNodes[i],\r\n                        children[i],\r\n                        context,\r\n                        isSvg,\r\n                        deep\r\n                    );\r\n                } else {\r\n                    if (childNodes[i]) {\r\n                        emitRemove(childNodes[i]);\r\n                        remove(base, childNodes[i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    base[MASTER] = {\r\n        prev: next,\r\n        components\r\n    };\r\n\r\n    next.emit(isCreate ? \"created\" : \"updated\", base);\r\n\r\n    return base;\r\n}\r\n/**\r\n * Update or delete the attributes and events of a node\r\n * @param {HTMLElement} node - Node to assign changes\r\n * @param {Object} prev - Previous status of attributes\r\n * @param {Object} next - next status of attributes\r\n * @param {Boolean} [isSvg] - If it belongs to svg tree\r\n */\r\nexport function diffProps(node, prev, next, isSvg) {\r\n    let prevKeys = Object.keys(prev),\r\n        nextKeys = Object.keys(next).filter(\r\n            key => prevKeys.indexOf(key) === -1\r\n        ),\r\n        keys = prevKeys.concat(nextKeys);\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n        let prop = keys[i];\r\n\r\n        if (IGNORE.indexOf(prop) > -1 || prev[prop] === next[prop]) continue;\r\n\r\n        let isFnPrev = typeof prev[prop] === \"function\",\r\n            isFnNext = typeof next[prop] === \"function\";\r\n        if (isFnPrev || isFnNext) {\r\n            if (!isFnNext && isFnPrev) {\r\n                node.removeEventListener(prop, node[LISTENER][prop][0]);\r\n            }\r\n            if (isFnNext) {\r\n                if (!isFnPrev) {\r\n                    node[LISTENER] = node[LISTENER] || {};\r\n                    if (!node[LISTENER][prop]) {\r\n                        node[LISTENER][prop] = [\r\n                            event => {\r\n                                node[LISTENER][prop][1](event);\r\n                            }\r\n                        ];\r\n                    }\r\n                    node.addEventListener(prop, node[LISTENER][prop][0]);\r\n                }\r\n                node[LISTENER][prop][1] = next[prop];\r\n            }\r\n        } else if (prop in next) {\r\n            if ((prop in node && !isSvg) || (isSvg && prop === \"style\")) {\r\n                if (prop === \"style\") {\r\n                    if (typeof next[prop] === \"object\") {\r\n                        let prevStyle = prev[prop] || {},\r\n                            nextStyle = next[prop];\r\n                        for (let prop in nextStyle) {\r\n                            if (prevStyle[prop] !== nextStyle[prop]) {\r\n                                if (prop[0] === \"-\") {\r\n                                    node.setProperty(prop, nextStyle[prop]);\r\n                                } else {\r\n                                    node.style[prop] = nextStyle[prop];\r\n                                }\r\n                            }\r\n                        }\r\n                        // next[prop] = { ...prevStyle, ...nextStyle };\r\n                    } else {\r\n                        node.style.cssText = next[prop];\r\n                    }\r\n                } else {\r\n                    node[prop] = next[prop];\r\n                }\r\n            } else {\r\n                isSvg\r\n                    ? node.setAttributeNS(null, prop, next[prop])\r\n                    : node.setAttribute(prop, next[prop]);\r\n            }\r\n        } else {\r\n            node.removeAttribute(prop);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Issues the deletion of node and its children\r\n * @param {HTMLElement} base\r\n */\r\nexport function emitRemove(base) {\r\n    let { prev = new VDom() } = getMaster(base),\r\n        children = base.childNodes;\r\n    base[REMOVE] = true;\r\n    prev.emit(\"remove\", base);\r\n    for (let i = 0; i < children.length; i++) {\r\n        emitRemove(children[i]);\r\n    }\r\n    prev.emit(\"removed\", base);\r\n}\r\n"],"names":["VDom","tag","props","children","this","Object","isVDom","value","root","parent","shadowRoot","remove","child","useShadowRoot","removeChild","append","appendChild","clone","emit","prop","prevent","ref","args","options","delay","MASTER","REMOVE","LISTENER","IGNORE","getMaster","base","Component","state","isSvg","deep","key","components","context","render","diff","setTimeout","node","next","currentKey","currentComponents","let","component","isCreate","addContext","prev","static","document","createElementNS","createElement","createTextNode","create","length","firstChild","newChild","oldChild","replaceChild","replace","emitRemove","prevKeys","keys","nextKeys","filter","indexOf","concat","i","isFnPrev","isFnNext","removeEventListener","event","addEventListener","prevStyle","nextStyle","setProperty","style","cssText","setAttributeNS","setAttribute","removeAttribute","diffProps","childNodes","Array","from","Math","max","textContent","String","merge","isArray","push"],"mappings":"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"}