{"version":3,"file":"orby.m.js","sources":["../src/vdom.js","../src/dom.js","../src/diff.js"],"sourcesContent":["export class VDom {\r\n    /**\r\n     *\r\n     * @param {Function|String} tag - Node component or label\r\n     * @param {Object} props - Properties of the label\r\n     * @param {Array} children - Children assigned to the node\r\n     */\r\n    constructor(tag, props = {}, children = []) {\r\n        this.tag = tag;\r\n        this.props = {\r\n            ...props,\r\n            children\r\n        };\r\n    }\r\n    /**\r\n     * Clone the current node by keeping props and children by default\r\n     * @param {Function|String} tag -  Node component or label\r\n     * @param {*} props - Properties of the label\r\n     * @param {*} children - Children assigned to the node\r\n     */\r\n    clone(tag = this.tag, props = this.props, children = this.props.children) {\r\n        return new VDom(tag, props, children);\r\n    }\r\n}\r\n/**\r\n * Prepare the virtual node\r\n * @param {Function|String} tag\r\n * @param {Object} props\r\n * @param  {...any} children\r\n * @return {VDom}\r\n */\r\nexport function h(tag, props, ...children) {\r\n    return new VDom(tag || \"\", props, concat(children));\r\n}\r\n/**\r\n * Clean existing values in virtual-dom tree\r\n * @param {*} children\r\n * @param {*} merge\r\n */\r\nexport function concat(children, next = []) {\r\n    for (let i = 0; i < children.length; i++) {\r\n        let value = children[i];\r\n        Array.isArray(value) ? concat(value, next) : next.push(value);\r\n    }\r\n    return next;\r\n}\r\n","export function create(tag, isSvg) {\r\n    if (tag) {\r\n        return isSvg\r\n            ? document.createElementNS(\"http://www.w3.org/2000/svg\", tag)\r\n            : document.createElement(tag);\r\n    } else {\r\n        return document.createTextNode(\"\");\r\n    }\r\n}\r\n\r\nexport function root(parent) {\r\n    return parent.shadowRoot || parent;\r\n}\r\nexport function remove(parent, child) {\r\n    parent.removeChild(child);\r\n}\r\n\r\nexport function append(parent, child) {\r\n    parent.appendChild(child);\r\n}\r\n\r\nexport function replace(parent, newChild, oldChild) {\r\n    parent.replaceChild(newChild, oldChild);\r\n}\r\n","import { VDom } from \"./vdom\";\r\nimport { create, remove, append, replace, root } from \"./dom\";\r\nexport { h } from \"./vdom\";\r\n\r\nexport let options = {\r\n    delay: 1\r\n};\r\n\r\nexport let COMPONENTS = \"__components__\";\r\n/**\r\n * Master is the mark to store the previous state\r\n * and if the node is controlled by one or more components\r\n */\r\nexport let PREVIOUS = \"__previous__\";\r\n/**\r\n * Each time a component is removed from the dom,\r\n * the property is marked as true\r\n */\r\nexport let REMOVE = \"__remove__\";\r\n\r\nexport let LISTENERS = \"__listeners__\";\r\n\r\n/**\r\n * Special properties of virtual dom,\r\n * these are ignored from the diffProps process,\r\n * since it is part of the component's life cycle\r\n */\r\n\r\nexport let IGNORE = /^(context|state|children|(create|update|remove)(d){0,1}|xmlns)$/;\r\n/**\r\n * It allows to print the status of virtual dom on the planned configuration\r\n * @param {VDom} next - the next state of the node\r\n * @param {HTMLElement} parent - the container of the node\r\n * @param {HTMLElement} [child]  - the ancestor of the node\r\n * @param {Object} [context] - the context of the node\r\n * @param {boolean} [isSvg] - check if the node belongs to a svg unit, to control it as such\r\n * @returns {HTMLElement} - The current node\r\n */\r\nexport function render(next, parent, child, context, isSvg) {\r\n    return diff(root(parent), child, next, context, isSvg);\r\n}\r\n\r\nexport function defer(handler) {\r\n    setTimeout(handler, options.delay);\r\n}\r\n\r\nexport function emit(vdom, prop, ...args) {\r\n    if (vdom.prevent) return;\r\n    if (prop === \"remove\") vdom.prevent = true;\r\n    if (vdom.props[prop]) vdom.props[prop](...args);\r\n}\r\n\r\nlet CURRENT_COMPONENT;\r\nlet CURRENT_KEY_STATE;\r\n\r\nexport function useState(initialState) {\r\n    let key = CURRENT_KEY_STATE++,\r\n        use = CURRENT_COMPONENT;\r\n    if (!(key in use.states)) {\r\n        use.states.push(\r\n            typeof initialState === \"function\" ? initialState() : initialState\r\n        );\r\n    }\r\n    return [\r\n        use.states[key],\r\n        nextState => {\r\n            use.states[key] = nextState;\r\n            if (use.prevent) return;\r\n            defer(() => {\r\n                use.render();\r\n                use.prevent = false;\r\n            });\r\n            use.prevent = true;\r\n        },\r\n        () => use.states[key]\r\n    ];\r\n}\r\n\r\nexport function useEffect(handler) {\r\n    CURRENT_COMPONENT.effects[0].push(handler);\r\n}\r\n/**\r\n *\r\n * @param {Function} component  - Function that controls the node\r\n * @param {*} [currentState] - The initial state of the component\r\n * @param {Boolean} [isSvg] - Create components for a group of svg\r\n * @return {HTMLElement} - Returns the current component node\r\n */\r\nexport class Component {\r\n    constructor(tag, isSvg, deep, currentKey, currentComponents) {\r\n        this.base;\r\n        this.parent;\r\n        this.tag = tag;\r\n        this.props = {};\r\n        this.states = [];\r\n        this.effects = [];\r\n        this.context = {};\r\n        this.prevent = false;\r\n        this.render = () => {\r\n            //if (this.prevent) return this.base;\r\n            if (this.base[REMOVE]) return;\r\n\r\n            CURRENT_KEY_STATE = 0;\r\n            CURRENT_COMPONENT = this;\r\n\r\n            this.effects = [[], []];\r\n\r\n            let nextStateRender = tag(this.props, this.context);\r\n\r\n            CURRENT_COMPONENT = false;\r\n\r\n            this.base = diff(\r\n                this.parent,\r\n                this.base,\r\n                nextStateRender,\r\n                this.context,\r\n                isSvg,\r\n                deep + 1,\r\n                currentKey + 1,\r\n                currentComponents\r\n            );\r\n\r\n            this.effects[1] = this.effects[0].map(handler => handler());\r\n\r\n            return this.base;\r\n        };\r\n    }\r\n}\r\n/**\r\n * It allows to print the status of virtual dom on the planned configuration\r\n * @param {HTMLElement} parent - the container of the node\r\n * @param {HTMLElement} [node]  - the ancestor of the node\r\n * @param {VDom} next - the next state of the node\r\n * @param {Object} [context] - the context of the node\r\n * @param {boolean} [isSvg] - check if the node belongs to a svg unit, to control it as such\r\n * @param {number} [deep] - this is a depth marker used to generate an index to store the state of the component\r\n * @param {number} [currentKey] - when generating a component of high order, it has a currentKey\r\n *                                other than 0, this allows to point to the state of the component correctly\r\n * @param {object} [currentComponents] - the functional components are stored in an object created by the first component\r\n * @returns {HTMLElement} - The current node\r\n */\r\n\r\nexport function diff(\r\n    parent,\r\n    node,\r\n    next,\r\n    context = {},\r\n    isSvg,\r\n    deep = 0,\r\n    currentKey = 0,\r\n    currentComponents = {}\r\n) {\r\n    let prev = (node && node[PREVIOUS]) || new VDom(),\r\n        components = (node && node[COMPONENTS]) || currentComponents,\r\n        base = node,\r\n        isCreate,\r\n        component,\r\n        withUpdate = true;\r\n\r\n    if (prev === next) return base;\r\n\r\n    if (!(next instanceof VDom)) {\r\n        next = new VDom(\"\", {}, next);\r\n    }\r\n\r\n    let children = next.props.children,\r\n        addContext = next.props.context;\r\n\r\n    context = addContext ? { ...context, ...addContext } : context;\r\n\r\n    isSvg = next.tag === \"svg\" || isSvg;\r\n\r\n    if (components[currentKey] && components[currentKey].tag !== next.tag) {\r\n        removeComponent(components[currentKey]);\r\n        delete components[currentKey];\r\n    }\r\n\r\n    if (typeof next.tag === \"function\") {\r\n        if ((components[currentKey] || {}).tag !== next.tag) {\r\n            components[currentKey] = new Component(\r\n                next.tag,\r\n                isSvg,\r\n                deep,\r\n                currentKey,\r\n                components\r\n            );\r\n        }\r\n        component = components[currentKey];\r\n        next = next.clone(prev.tag || \"\");\r\n    }\r\n\r\n    if (prev.tag !== next.tag) {\r\n        base = create(next.tag, isSvg);\r\n        if (node) {\r\n            if (!component && next.tag) {\r\n                let length = children.length;\r\n                while (node.firstChild) {\r\n                    if (!length--) break;\r\n                    append(base, node.firstChild);\r\n                }\r\n            }\r\n            replace(parent, base, node);\r\n            if (!component && prev.tag) {\r\n                recollectNodeTree(node);\r\n            }\r\n        } else {\r\n            append(parent, base);\r\n        }\r\n        isCreate = true;\r\n        emit(next, \"create\", base);\r\n    }\r\n\r\n    if (component) {\r\n        component.base = base;\r\n        component.parent = parent;\r\n        component.props = next.props;\r\n        component.context = context;\r\n\r\n        //if (deep && component.prevent) {\r\n        if (component.prevent) {\r\n            return component.base;\r\n        }\r\n\r\n        return component.render();\r\n    } else if (next.tag) {\r\n        withUpdate =\r\n            emit(next, \"update\", base, prev.props, next.props) !== false;\r\n        if (isCreate || withUpdate) {\r\n            diffProps(\r\n                base,\r\n                prev.tag === next.tag ? prev.props : {},\r\n                next.props,\r\n                isSvg\r\n            );\r\n            let nextParent = next.props.scoped ? root(base) : base,\r\n                childNodes = nextParent.childNodes,\r\n                move = 0,\r\n                length = Math.max(children.length, childNodes.length);\r\n            for (let i = 0; i < length; i++) {\r\n                let childI = i - move;\r\n                if (i in children) {\r\n                    diff(\r\n                        nextParent,\r\n                        childNodes[childI],\r\n                        children[i],\r\n                        context,\r\n                        isSvg\r\n                    );\r\n                } else {\r\n                    recollectNodeTree(childNodes[childI]);\r\n                    remove(nextParent, childNodes[childI]);\r\n                    move++;\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        if (prev.props.children !== next.props.children) {\r\n            base.textContent = next.props.children;\r\n        }\r\n    }\r\n\r\n    base[PREVIOUS] = withUpdate ? next : prev;\r\n    base[COMPONENTS] = components;\r\n\r\n    emit(next, isCreate ? \"created\" : \"updated\", base);\r\n\r\n    return base;\r\n}\r\n/**\r\n * Update or delete the attributes and events of a node\r\n * @param {HTMLElement} node - Node to assign changes\r\n * @param {Object} prev - Previous status of attributes\r\n * @param {Object} next - next status of attributes\r\n * @param {Boolean} [isSvg] - If it belongs to svg tree\r\n */\r\nexport function diffProps(node, prev, next, isSvg) {\r\n    let prevKeys = Object.keys(prev),\r\n        nextKeys = Object.keys(next),\r\n        keys = prevKeys.concat(nextKeys),\r\n        define = {};\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n        let prop = keys[i];\r\n\r\n        if (define[prop] || prev[prop] === next[prop] || IGNORE.test(prop))\r\n            continue;\r\n\r\n        define[prop] = true;\r\n\r\n        if (\"scoped\" === prop && \"attachShadow\" in node) {\r\n            node.attachShadow({ mode: next[prop] ? \"open\" : \"closed\" });\r\n            continue;\r\n        }\r\n\r\n        let isFnPrev = typeof prev[prop] === \"function\",\r\n            isFnNext = typeof next[prop] === \"function\";\r\n\r\n        if (isFnPrev || isFnNext) {\r\n            if (!isFnNext && isFnPrev) {\r\n                node.removeEventListener(prop, node[LISTENERS][prop][0]);\r\n            }\r\n            if (isFnNext) {\r\n                if (!isFnPrev) {\r\n                    node[LISTENERS] = node[LISTENERS] || {};\r\n                    if (!node[LISTENERS][prop]) {\r\n                        node[LISTENERS][prop] = [\r\n                            event => {\r\n                                node[LISTENERS][prop][1](event);\r\n                            }\r\n                        ];\r\n                    }\r\n                    node.addEventListener(prop, node[LISTENERS][prop][0]);\r\n                }\r\n                node[LISTENERS][prop][1] = next[prop];\r\n            }\r\n        } else if (prop in next) {\r\n            if ((prop in node && !isSvg) || (isSvg && prop === \"style\")) {\r\n                if (prop === \"style\") {\r\n                    if (typeof next[prop] === \"object\") {\r\n                        let prevStyle = prev[prop] || {},\r\n                            nextStyle = next[prop];\r\n                        for (let prop in nextStyle) {\r\n                            if (prevStyle[prop] !== nextStyle[prop]) {\r\n                                if (prop[0] === \"-\") {\r\n                                    node.style.setProperty(\r\n                                        prop,\r\n                                        nextStyle[prop]\r\n                                    );\r\n                                } else {\r\n                                    node.style[prop] = nextStyle[prop];\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        node.style.cssText = next[prop];\r\n                    }\r\n                } else {\r\n                    node[prop] = next[prop];\r\n                }\r\n            } else {\r\n                isSvg\r\n                    ? node.setAttributeNS(null, prop, next[prop])\r\n                    : node.setAttribute(prop, next[prop]);\r\n            }\r\n        } else {\r\n            node.removeAttribute(prop);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Issues the deletion of node and its children\r\n * @param {HTMLElement} base\r\n */\r\nexport function recollectNodeTree(node) {\r\n    let prev = node[PREVIOUS],\r\n        components = node[COMPONENTS],\r\n        children = node.childNodes;\r\n\r\n    if (!prev) return;\r\n\r\n    node[REMOVE] = true;\r\n\r\n    for (let key in components) {\r\n        removeComponent(components[key]);\r\n    }\r\n\r\n    emit(prev, \"remove\", node);\r\n\r\n    for (let i = 0; i < children.length; i++) {\r\n        recollectNodeTree(children[i]);\r\n    }\r\n\r\n    emit(prev, \"removed\", node);\r\n}\r\n\r\nexport function removeComponent(component) {\r\n    let effectsRemove = component.effects[1];\r\n    for (let i = 0; i < effectsRemove.length; i++) {\r\n        if (effectsRemove[i]) effectsRemove[i](component);\r\n    }\r\n}\r\n"],"names":["VDom","tag","props","children","this","Object","h","concat","next","let","i","length","value","Array","isArray","push","root","parent","shadowRoot","remove","child","removeChild","append","appendChild","clone","CURRENT_COMPONENT","CURRENT_KEY_STATE","options","delay","COMPONENTS","PREVIOUS","REMOVE","LISTENERS","IGNORE","render","context","isSvg","diff","emit","vdom","prop","prevent","ref","args","useState","initialState","key","use","states","nextState","setTimeout","useEffect","handler","effects","Component","deep","currentKey","currentComponents","base","nextStateRender","map","node","isCreate","component","prev","components","withUpdate","addContext","removeComponent","document","createElementNS","createElement","createTextNode","create","firstChild","newChild","oldChild","replaceChild","replace","recollectNodeTree","prevKeys","keys","nextKeys","define","test","attachShadow","mode","isFnPrev","isFnNext","removeEventListener","event","addEventListener","prevStyle","nextStyle","style","setProperty","cssText","setAttributeNS","setAttribute","removeAttribute","diffProps","nextParent","scoped","childNodes","move","Math","max","childI","textContent","effectsRemove"],"mappings":"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"}