{"version":3,"file":"orby.m.js","sources":["../src/vdom.js","../src/dom.js","../src/diff.js"],"sourcesContent":["export class VDom {\r\n    /**\r\n     *\r\n     * @param {Function|String} tag - Node component or label\r\n     * @param {Object} props - Properties of the label\r\n     * @param {Array} children - Children assigned to the node\r\n     */\r\n    constructor(tag, props = {}, children = []) {\r\n        this.tag = tag;\r\n        this.props = {\r\n            ...props,\r\n            children\r\n        };\r\n    }\r\n    /**\r\n     * Clone the current node by keeping props and children by default\r\n     * @param {Function|String} tag -  Node component or label\r\n     * @param {*} props - Properties of the label\r\n     * @param {*} children - Children assigned to the node\r\n     */\r\n    clone(tag = this.tag, props = this.props, children = this.props.children) {\r\n        return new VDom(tag, props, children);\r\n    }\r\n    /**\r\n     * Dispatch an existing function in `this.props`\r\n     * @param {String} prop - Property to emit the virtual node only if it exists as a function\r\n     * @param  {...any} args - Arguments to be issued to the function\r\n     */\r\n    emit(prop, ...args) {\r\n        if (this.prevent) return;\r\n        if (prop === \"remove\") this.prevent = true;\r\n        if (typeof this.props[prop] === \"function\") this.props[prop](...args);\r\n    }\r\n}\r\n/**\r\n * Prepare the virtual node\r\n * @param {Function|String} tag\r\n * @param {Object} props\r\n * @param  {...any} children\r\n * @return {VDom}\r\n */\r\nexport function h(tag, props, ...children) {\r\n    return new VDom(tag || \"\", props, concat(children));\r\n}\r\n/**\r\n * Verify if this is a virtual node\r\n * @param {*} value\r\n * @return {Boolean}\r\n */\r\nexport function isVDom(value) {\r\n    return typeof value === \"object\" && value instanceof VDom;\r\n}\r\n/**\r\n * Clean existing values in virtual-dom tree\r\n * @param {*} children\r\n * @param {*} merge\r\n */\r\nexport function concat(children, merge = []) {\r\n    for (let i = 0; i < children.length; i++) {\r\n        let child = children[i];\r\n        Array.isArray(child)\r\n            ? concat(child, merge)\r\n            : merge.push(\r\n                  isVDom(child) ? child : new VDom(\"\", {}, [child || \"\"])\r\n              );\r\n    }\r\n    return merge;\r\n}\r\n","export function create(tag, isSvg) {\r\n    return isSvg\r\n        ? document.createElementNS(\"http://www.w3.org/2000/svg\", tag)\r\n        : tag\r\n            ? document.createElement(tag)\r\n            : document.createTextNode(\"\");\r\n}\r\n\r\nexport function root(parent) {\r\n    return parent.shadowRoot || parent;\r\n}\r\nexport function remove(parent, child) {\r\n    root(parent).removeChild(child);\r\n}\r\n\r\nexport function append(parent, child) {\r\n    root(parent).appendChild(child);\r\n}\r\n\r\nexport function replace(parent, newChild, oldChild) {\r\n    root(parent).replaceChild(newChild, oldChild);\r\n}\r\n","import { VDom, isVDom } from \"./vdom\";\r\nimport { create, remove, append, replace, root } from \"./dom\";\r\nexport { h, isVDom } from \"./vdom\";\r\n\r\n/**\r\n * Master is the mark to store the previous state\r\n * and if the node is controlled by one or more components\r\n */\r\nexport let MASTER = \"__master__\";\r\n/**\r\n * Each time a component is removed from the dom,\r\n * the property is marked as true\r\n */\r\nexport let REMOVE = \"__remove__\";\r\n\r\nexport let LISTENER = \"__listeners__\";\r\n/**\r\n * Special properties of virtual dom,\r\n * these are ignored from the diffProps process,\r\n * since it is part of the component's life cycle\r\n */\r\nexport let IGNORE = [\r\n    \"children\",\r\n    \"create\",\r\n    \"created\",\r\n    \"remove\",\r\n    \"removed\",\r\n    \"update\",\r\n    /**\r\n     * It is executed once sent to the diff process to the succesors\r\n     */\r\n    \"updated\",\r\n    /**\r\n     * Create a new context for successors\r\n     */\r\n    \"context\",\r\n    /**\r\n     * Defines the initial state for a component\r\n     */\r\n    \"state\",\r\n    /**\r\n     * It allows to avoid the execution of the\r\n     * component the same type of label that\r\n     * its predecessor is conserved\r\n     */\r\n    \"static\"\r\n];\r\n/**\r\n * It allows to print the status of virtual dom on the planned configuration\r\n * @param {VDom} next - the next state of the node\r\n * @param {HTMLElement} parent - the container of the node\r\n * @param {HTMLElement} [child]  - the ancestor of the node\r\n * @param {Object} [context] - the context of the node\r\n * @param {boolean} [isSvg] - check if the node belongs to a svg unit, to control it as such\r\n * @returns {HTMLElement} - The current node\r\n */\r\nexport function render(next, parent, child, context, isSvg) {\r\n    return diff(parent, child, next, context, isSvg);\r\n}\r\n/**\r\n * Gets the node's status mark\r\n * @param {HTMLElement} [base]\r\n * @return {object} - returns an object since the property associated\r\n *                    with the master in the whole diff is decomposed\r\n */\r\nexport function getMaster(base) {\r\n    return (base && base[MASTER]) || {};\r\n}\r\n\r\nexport function defer(handler) {\r\n    requestAnimationFrame(handler);\r\n    //setTimeout(handler, 8.33);\r\n}\r\n/**\r\n *\r\n * @param {Function} component  - Function that controls the node\r\n * @param {*} [currentState] - The initial state of the component\r\n * @param {Boolean} [isSvg] - Create components for a group of svg\r\n * @return {HTMLElement} - Returns the current component node\r\n */\r\nexport function Component(tag, state, isSvg, deep, key, components) {\r\n    this.tag = tag;\r\n    this.state = state;\r\n    this.context = {};\r\n    this.prevent = false;\r\n    this.render = (parent, base) => {\r\n        let set = state => {\r\n                this.state = state;\r\n                if (!base[REMOVE] && !this.prevent) {\r\n                    this.prevent = true;\r\n                    defer(() => {\r\n                        this.render(parent, base);\r\n                        this.prevent = false;\r\n                    });\r\n                }\r\n            },\r\n            get = () => this.state;\r\n        return (base = diff(\r\n            parent,\r\n            base,\r\n            this.tag(this.props, { set, get }, this.context),\r\n            this.context,\r\n            isSvg,\r\n            deep + 1,\r\n            key + 1,\r\n            components\r\n        ));\r\n    };\r\n}\r\n/**\r\n * It allows to print the status of virtual dom on the planned configuration\r\n * @param {HTMLElement} parent - the container of the node\r\n * @param {HTMLElement} [node]  - the ancestor of the node\r\n * @param {VDom} next - the next state of the node\r\n * @param {Object} [context] - the context of the node\r\n * @param {boolean} [isSvg] - check if the node belongs to a svg unit, to control it as such\r\n * @returns {HTMLElement} - The current node\r\n */\r\n\r\nexport function diff(\r\n    parent,\r\n    node,\r\n    next,\r\n    context = {},\r\n    isSvg,\r\n    deep = 0,\r\n    currentKey = 0,\r\n    currentComponents = {}\r\n) {\r\n    next = isVDom(next) ? next : new VDom(\"\", {}, [next || \"\"]);\r\n\r\n    let base = node,\r\n        { prev = new VDom(), components = currentComponents } = getMaster(base),\r\n        component,\r\n        isCreate,\r\n        addContext = next.props.context;\r\n\r\n    context = addContext ? { ...context, ...addContext } : context;\r\n\r\n    isSvg = next.tag === \"svg\" || isSvg;\r\n    if (prev === next || (prev.tag && next.tag && next.props.static))\r\n        return base;\r\n\r\n    if (components[currentKey] && components[currentKey].tag !== next.tag) {\r\n        delete components[currentKey];\r\n    }\r\n\r\n    if (typeof next.tag === \"function\") {\r\n        if ((components[currentKey] || {}).tag !== next.tag) {\r\n            components[currentKey] = new Component(\r\n                next.tag,\r\n                next.props.state,\r\n                isSvg,\r\n                deep,\r\n                currentKey,\r\n                components\r\n            );\r\n        }\r\n        component = components[currentKey];\r\n        next = next.clone(prev.tag || (isSvg ? \"g\" : \"\"));\r\n    }\r\n\r\n    let children = next.props.children;\r\n\r\n    if (next.tag !== prev.tag) {\r\n        base = create(next.tag, isSvg);\r\n        if (node) {\r\n            if (!component && next.tag !== \"\") {\r\n                let length = children.length;\r\n                while (node.firstChild) {\r\n                    if (!length--) break;\r\n                    append(base, node.firstChild);\r\n                }\r\n            }\r\n            replace(parent, base, node);\r\n            if (!component) emitRemove(node);\r\n        } else {\r\n            append(parent, base);\r\n        }\r\n        isCreate = true;\r\n        next.emit(\"create\", base);\r\n    }\r\n    if (component) {\r\n        component.props = next.props;\r\n        component.context = context;\r\n        if (deep && component.prevent) {\r\n            return base;\r\n        }\r\n        return component.render(parent, base);\r\n    } else if (!next.tag) {\r\n        if (prev.props.children[0] !== next.props.children[0]) {\r\n            base.textContent = String(next.props.children[0]);\r\n        }\r\n    } else {\r\n        if (\r\n            isCreate ||\r\n            next.emit(\"update\", base, prev.props, next.props) !== false\r\n        ) {\r\n            diffProps(\r\n                base,\r\n                next.tag === prev.tag ? prev.props : {},\r\n                next.props,\r\n                isSvg\r\n            );\r\n            deep++;\r\n            let childNodes = Array.from(root(base).childNodes),\r\n                length = Math.max(childNodes.length, children.length);\r\n            for (let i = 0; i < length; i++) {\r\n                if (children[i]) {\r\n                    diff(\r\n                        base,\r\n                        childNodes[i],\r\n                        children[i],\r\n                        context,\r\n                        isSvg,\r\n                        deep\r\n                    );\r\n                } else {\r\n                    if (childNodes[i]) {\r\n                        emitRemove(childNodes[i]);\r\n                        remove(base, childNodes[i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    base[MASTER] = {\r\n        prev: next,\r\n        components\r\n    };\r\n\r\n    next.emit(isCreate ? \"created\" : \"updated\", base);\r\n\r\n    return base;\r\n}\r\n/**\r\n * Update or delete the attributes and events of a node\r\n * @param {HTMLElement} node - Node to assign changes\r\n * @param {Object} prev - Previous status of attributes\r\n * @param {Object} next - next status of attributes\r\n * @param {Boolean} [isSvg] - If it belongs to svg tree\r\n */\r\nexport function diffProps(node, prev, next, isSvg) {\r\n    let prevKeys = Object.keys(prev),\r\n        nextKeys = Object.keys(next).filter(\r\n            key => prevKeys.indexOf(key) === -1\r\n        ),\r\n        keys = prevKeys.concat(nextKeys);\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n        let prop = keys[i];\r\n\r\n        if (IGNORE.indexOf(prop) > -1 || prev[prop] === next[prop]) continue;\r\n\r\n        let isFnPrev = typeof prev[prop] === \"function\",\r\n            isFnNext = typeof next[prop] === \"function\";\r\n        if (isFnPrev || isFnNext) {\r\n            if (!isFnNext && isFnPrev) {\r\n                node.removeEventListener(prop, node[LISTENER][prop][0]);\r\n            }\r\n            if (isFnNext) {\r\n                if (!isFnPrev) {\r\n                    node[LISTENER] = node[LISTENER] || {};\r\n                    if (!node[LISTENER][prop]) {\r\n                        node[LISTENER][prop] = [\r\n                            event => {\r\n                                node[LISTENER][prop][1](event);\r\n                            }\r\n                        ];\r\n                    }\r\n                    node.addEventListener(prop, node[LISTENER][prop][0]);\r\n                }\r\n                node[LISTENER][prop][1] = next[prop];\r\n            }\r\n        } else if (prop in next) {\r\n            if ((prop in node && !isSvg) || (isSvg && prop === \"style\")) {\r\n                if (prop === \"style\") {\r\n                    if (typeof next[prop] === \"object\") {\r\n                        let prevStyle = prev[prop] || {},\r\n                            nextStyle = next[prop];\r\n                        for (let prop in nextStyle) {\r\n                            if (prevStyle[prop] !== nextStyle[prop]) {\r\n                                if (prop[0] === \"-\") {\r\n                                    node.setProperty(prop, nextStyle[prop]);\r\n                                } else {\r\n                                    node.style[prop] = nextStyle[prop];\r\n                                }\r\n                            }\r\n                        }\r\n                        // next[prop] = { ...prevStyle, ...nextStyle };\r\n                    } else {\r\n                        node.style.cssText = next[prop];\r\n                    }\r\n                } else {\r\n                    node[prop] = next[prop];\r\n                }\r\n            } else {\r\n                isSvg\r\n                    ? node.setAttributeNS(null, prop, next[prop])\r\n                    : node.setAttribute(prop, next[prop]);\r\n            }\r\n        } else {\r\n            node.removeAttribute(prop);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Issues the deletion of node and its children\r\n * @param {HTMLElement} base\r\n */\r\nexport function emitRemove(base) {\r\n    let { prev = new VDom() } = getMaster(base),\r\n        children = base.childNodes;\r\n    base[REMOVE] = true;\r\n    prev.emit(\"remove\", base);\r\n    for (let i = 0; i < children.length; i++) {\r\n        emitRemove(children[i]);\r\n    }\r\n    prev.emit(\"removed\", base);\r\n}\r\n"],"names":["VDom","tag","props","children","this","Object","h","concat","merge","let","i","length","child","Array","isArray","push","isVDom","value","root","parent","shadowRoot","remove","removeChild","append","appendChild","clone","emit","prop","prevent","ref","args","MASTER","REMOVE","LISTENER","IGNORE","render","next","context","isSvg","diff","getMaster","base","Component","state","deep","key","components","requestAnimationFrame","node","currentKey","currentComponents","component","isCreate","addContext","prev","static","document","createElementNS","createElement","createTextNode","create","firstChild","newChild","oldChild","replaceChild","replace","emitRemove","prevKeys","keys","nextKeys","filter","indexOf","isFnPrev","isFnNext","removeEventListener","event","addEventListener","prevStyle","nextStyle","setProperty","style","cssText","setAttributeNS","setAttribute","removeAttribute","diffProps","childNodes","from","Math","max","textContent","String"],"mappings":"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"}