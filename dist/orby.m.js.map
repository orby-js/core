{"version":3,"file":"orby.m.js","sources":["../src/vdom.js","../src/dom.js","../src/diff.js"],"sourcesContent":["export class VDom {\r\n    /**\r\n     *\r\n     * @param {Function|String} tag - Node component or label\r\n     * @param {Object} props - Properties of the label\r\n     * @param {Array} children - Children assigned to the node\r\n     */\r\n    constructor(tag, props = {}, children = []) {\r\n        this.tag = tag;\r\n        this.props = {\r\n            ...props,\r\n            children\r\n        };\r\n    }\r\n    /**\r\n     * Clone the current node by keeping props and children by default\r\n     * @param {Function|String} tag -  Node component or label\r\n     * @param {*} props - Properties of the label\r\n     * @param {*} children - Children assigned to the node\r\n     */\r\n    clone(tag = this.tag, props = this.props, children = this.props.children) {\r\n        return new VDom(tag, props, children);\r\n    }\r\n    /**\r\n     * Dispatch an existing function in `this.props`\r\n     * @param {String} prop - Property to emit the virtual node only if it exists as a function\r\n     * @param  {...any} args - Arguments to be issued to the function\r\n     */\r\n    emit(prop, ...args) {\r\n        if (this.prevent) return;\r\n        if (prop === \"remove\") this.prevent = true;\r\n        if (typeof this.props[prop] === \"function\") this.props[prop](...args);\r\n    }\r\n}\r\n/**\r\n * Prepare the virtual node\r\n * @param {Function|String} tag\r\n * @param {Object} props\r\n * @param  {...any} children\r\n * @return {VDom}\r\n */\r\nexport function h(tag, props, ...children) {\r\n    return new VDom(tag || \"\", props, concat(children));\r\n}\r\n/**\r\n * Clean existing values in virtual-dom tree\r\n * @param {*} children\r\n * @param {*} merge\r\n */\r\nexport function concat(children, next = []) {\r\n    for (let i = 0; i < children.length; i++) {\r\n        let value = children[i];\r\n        Array.isArray(value) ? concat(value, next) : next.push(value);\r\n    }\r\n    return next;\r\n}\r\n","export function create(tag, isSvg) {\r\n    return isSvg\r\n        ? document.createElementNS(\"http://www.w3.org/2000/svg\", tag)\r\n        : tag\r\n        ? document.createElement(tag)\r\n        : document.createTextNode(\"\");\r\n}\r\n\r\nexport function root(parent) {\r\n    return parent.shadowRoot || parent;\r\n}\r\nexport function remove(parent, child) {\r\n    parent.removeChild(child);\r\n}\r\n\r\nexport function append(parent, child) {\r\n    parent.appendChild(child);\r\n}\r\n\r\nexport function replace(parent, newChild, oldChild) {\r\n    parent.replaceChild(newChild, oldChild);\r\n}\r\n","import { VDom } from \"./vdom\";\r\nimport { create, remove, append, replace, root } from \"./dom\";\r\nexport { h } from \"./vdom\";\r\n\r\nexport let options = {\r\n    delay: 1\r\n};\r\n\r\nexport let COMPONENTS = \"__components__\";\r\n/**\r\n * Master is the mark to store the previous state\r\n * and if the node is controlled by one or more components\r\n */\r\nexport let PREVIOUS = \"__previous__\";\r\n/**\r\n * Each time a component is removed from the dom,\r\n * the property is marked as true\r\n */\r\nexport let REMOVE = \"__remove__\";\r\n\r\nexport let LISTENERS = \"__listeners__\";\r\n/**\r\n * Special properties of virtual dom,\r\n * these are ignored from the diffProps process,\r\n * since it is part of the component's life cycle\r\n */\r\n\r\nexport let IGNORE = /^(context|state|children|(create|update|remove)(d){0,1}|xmlns)$/;\r\n/**\r\n * It allows to print the status of virtual dom on the planned configuration\r\n * @param {VDom} next - the next state of the node\r\n * @param {HTMLElement} parent - the container of the node\r\n * @param {HTMLElement} [child]  - the ancestor of the node\r\n * @param {Object} [context] - the context of the node\r\n * @param {boolean} [isSvg] - check if the node belongs to a svg unit, to control it as such\r\n * @returns {HTMLElement} - The current node\r\n */\r\nexport function render(next, parent, child, context, isSvg) {\r\n    return diff(root(parent), child, next, context, isSvg);\r\n}\r\n\r\nexport function defer(handler) {\r\n    setTimeout(handler, options.delay);\r\n}\r\n/**\r\n *\r\n * @param {Function} component  - Function that controls the node\r\n * @param {*} [currentState] - The initial state of the component\r\n * @param {Boolean} [isSvg] - Create components for a group of svg\r\n * @return {HTMLElement} - Returns the current component node\r\n */\r\nexport function Component(tag, state, isSvg, deep, key, components) {\r\n    this.tag = tag;\r\n    this.state = state;\r\n    this.context = {};\r\n    this.prevent = false;\r\n    this.render = (parent, base) => {\r\n        let set = state => {\r\n                this.state = state;\r\n                if (!base[REMOVE] && !this.prevent) {\r\n                    this.prevent = true;\r\n                    defer(() => {\r\n                        this.render(parent, base);\r\n                        this.prevent = false;\r\n                    });\r\n                }\r\n            },\r\n            get = () => this.state;\r\n        return (base = diff(\r\n            parent,\r\n            base,\r\n            this.tag(this.props, { set, get }, this.context),\r\n            this.context,\r\n            isSvg,\r\n            deep + 1,\r\n            key + 1,\r\n            components\r\n        ));\r\n    };\r\n}\r\n/**\r\n * It allows to print the status of virtual dom on the planned configuration\r\n * @param {HTMLElement} parent - the container of the node\r\n * @param {HTMLElement} [node]  - the ancestor of the node\r\n * @param {VDom} next - the next state of the node\r\n * @param {Object} [context] - the context of the node\r\n * @param {boolean} [isSvg] - check if the node belongs to a svg unit, to control it as such\r\n * @param {number} [deep] - this is a depth marker used to generate an index to store the state of the component\r\n * @param {number} [currentKey] - when generating a component of high order, it has a currentKey\r\n *                                other than 0, this allows to point to the state of the component correctly\r\n * @param {object} [currentComponents] - the functional components are stored in an object created by the first component\r\n * @returns {HTMLElement} - The current node\r\n */\r\n\r\nexport function diff(\r\n    parent,\r\n    node,\r\n    next,\r\n    context = {},\r\n    isSvg,\r\n    deep = 0,\r\n    currentKey = 0,\r\n    currentComponents = {}\r\n) {\r\n    let prev = (node && node[PREVIOUS]) || new VDom(),\r\n        components = (node && node[COMPONENTS]) || currentComponents,\r\n        base = node,\r\n        isCreate,\r\n        component,\r\n        withUpdate = true;\r\n\r\n    if (prev === next) return base;\r\n\r\n    if (!(next instanceof VDom)) {\r\n        next = new VDom(\"\", {}, next);\r\n    }\r\n\r\n    let children = next.props.children,\r\n        addContext = next.props.context;\r\n\r\n    context = addContext ? { ...context, ...addContext } : context;\r\n\r\n    isSvg = next.tag === \"svg\" || isSvg;\r\n\r\n    if (components[currentKey] && components[currentKey].tag !== next.tag) {\r\n        delete components[currentKey];\r\n    }\r\n\r\n    if (typeof next.tag === \"function\") {\r\n        if ((components[currentKey] || {}).tag !== next.tag) {\r\n            components[currentKey] = new Component(\r\n                next.tag,\r\n                next.props.state,\r\n                isSvg,\r\n                deep,\r\n                currentKey,\r\n                components\r\n            );\r\n        }\r\n        component = components[currentKey];\r\n        next = next.clone(prev.tag || (isSvg ? \"g\" : \"\"));\r\n    }\r\n\r\n    if (prev.tag !== next.tag) {\r\n        base = create(next.tag, isSvg);\r\n        if (node) {\r\n            if (!component && next.tag) {\r\n                let length = children.length;\r\n                while (node.firstChild) {\r\n                    if (!length--) break;\r\n                    append(base, node.firstChild);\r\n                }\r\n            }\r\n            replace(parent, base, node);\r\n            if (!component && prev.tag) emitRemove(node);\r\n        } else {\r\n            append(parent, base);\r\n        }\r\n        isCreate = true;\r\n        next.emit(\"create\", base);\r\n    }\r\n\r\n    if (component) {\r\n        component.props = next.props;\r\n        component.context = context;\r\n        if (deep && component.prevent) {\r\n            return base;\r\n        }\r\n        return component.render(parent, base);\r\n    } else if (next.tag) {\r\n        withUpdate =\r\n            next.emit(\"update\", base, prev.props, next.props) !== false;\r\n        if (isCreate || withUpdate) {\r\n            diffProps(\r\n                base,\r\n                prev.tag === next.tag ? prev.props : {},\r\n                next.props,\r\n                isSvg\r\n            );\r\n            let nextParent = next.props.scoped ? root(base) : base,\r\n                childNodes = nextParent.childNodes,\r\n                move = 0,\r\n                length = Math.max(children.length, childNodes.length);\r\n            for (let i = 0; i < length; i++) {\r\n                let childI = i - move;\r\n                if (i in children) {\r\n                    diff(\r\n                        nextParent,\r\n                        childNodes[childI],\r\n                        children[i],\r\n                        context,\r\n                        isSvg\r\n                    );\r\n                } else {\r\n                    remove(nextParent, childNodes[childI]);\r\n                    move++;\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        if (prev.props.children !== next.props.children) {\r\n            base.textContent = next.props.children;\r\n        }\r\n    }\r\n\r\n    base[PREVIOUS] = withUpdate ? next : prev;\r\n    base[COMPONENTS] = components;\r\n\r\n    next.emit(isCreate ? \"created\" : \"updated\", base);\r\n\r\n    return base;\r\n}\r\n/**\r\n * Update or delete the attributes and events of a node\r\n * @param {HTMLElement} node - Node to assign changes\r\n * @param {Object} prev - Previous status of attributes\r\n * @param {Object} next - next status of attributes\r\n * @param {Boolean} [isSvg] - If it belongs to svg tree\r\n */\r\nexport function diffProps(node, prev, next, isSvg) {\r\n    let prevKeys = Object.keys(prev),\r\n        nextKeys = Object.keys(next),\r\n        keys = prevKeys.concat(nextKeys),\r\n        define = {};\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n        let prop = keys[i];\r\n\r\n        if (define[prop] || prev[prop] === next[prop] || IGNORE.test(prop))\r\n            continue;\r\n\r\n        define[prop] = true;\r\n\r\n        if (\"scoped\" === prop && \"attachShadow\" in node) {\r\n            node.attachShadow({ mode: next[prop] ? \"open\" : \"closed\" });\r\n            continue;\r\n        }\r\n\r\n        let isFnPrev = typeof prev[prop] === \"function\",\r\n            isFnNext = typeof next[prop] === \"function\";\r\n\r\n        if (isFnPrev || isFnNext) {\r\n            if (!isFnNext && isFnPrev) {\r\n                node.removeEventListener(prop, node[LISTENERS][prop][0]);\r\n            }\r\n            if (isFnNext) {\r\n                if (!isFnPrev) {\r\n                    node[LISTENERS] = node[LISTENERS] || {};\r\n                    if (!node[LISTENERS][prop]) {\r\n                        node[LISTENERS][prop] = [\r\n                            event => {\r\n                                node[LISTENERS][prop][1](event);\r\n                            }\r\n                        ];\r\n                    }\r\n                    node.addEventListener(prop, node[LISTENERS][prop][0]);\r\n                }\r\n                node[LISTENERS][prop][1] = next[prop];\r\n            }\r\n        } else if (prop in next) {\r\n            if ((prop in node && !isSvg) || (isSvg && prop === \"style\")) {\r\n                if (prop === \"style\") {\r\n                    if (typeof next[prop] === \"object\") {\r\n                        let prevStyle = prev[prop] || {},\r\n                            nextStyle = next[prop];\r\n                        for (let prop in nextStyle) {\r\n                            if (prevStyle[prop] !== nextStyle[prop]) {\r\n                                if (prop[0] === \"-\") {\r\n                                    node.style.setProperty(\r\n                                        prop,\r\n                                        nextStyle[prop]\r\n                                    );\r\n                                } else {\r\n                                    node.style[prop] = nextStyle[prop];\r\n                                }\r\n                            }\r\n                        }\r\n                        // next[prop] = { ...prevStyle, ...nextStyle };\r\n                    } else {\r\n                        node.style.cssText = next[prop];\r\n                    }\r\n                } else {\r\n                    node[prop] = next[prop];\r\n                }\r\n            } else {\r\n                isSvg\r\n                    ? node.setAttributeNS(null, prop, next[prop])\r\n                    : node.setAttribute(prop, next[prop]);\r\n            }\r\n        } else {\r\n            node.removeAttribute(prop);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Issues the deletion of node and its children\r\n * @param {HTMLElement} base\r\n */\r\nexport function emitRemove(base) {\r\n    let { prev = new VDom() } = (base && base[MASTER]) || {},\r\n        children = base.childNodes;\r\n    base[REMOVE] = true;\r\n    prev.emit(\"remove\", base);\r\n    for (let i = 0; i < children.length; i++) {\r\n        emitRemove(children[i]);\r\n    }\r\n    prev.emit(\"removed\", base);\r\n}\r\n"],"names":["VDom","tag","props","children","this","Object","h","concat","next","let","i","length","value","Array","isArray","push","root","parent","shadowRoot","remove","child","removeChild","append","appendChild","clone","emit","prop","prevent","ref","args","options","delay","COMPONENTS","PREVIOUS","REMOVE","LISTENERS","IGNORE","render","context","isSvg","diff","Component","state","deep","key","components","base","setTimeout","node","currentKey","currentComponents","isCreate","component","prev","withUpdate","addContext","document","createElementNS","createElement","createTextNode","create","firstChild","newChild","oldChild","replaceChild","replace","emitRemove","MASTER","childNodes","prevKeys","keys","nextKeys","define","test","attachShadow","mode","isFnPrev","isFnNext","removeEventListener","event","addEventListener","prevStyle","nextStyle","style","setProperty","cssText","setAttributeNS","setAttribute","removeAttribute","diffProps","nextParent","scoped","move","Math","max","childI","textContent"],"mappings":"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"}