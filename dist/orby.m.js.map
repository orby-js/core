{"version":3,"file":"orby.m.js","sources":["../src/vdom.js","../src/diff.js","../src/dom.js"],"sourcesContent":["export class VDom {\r\n    /**\r\n     *\r\n     * @param {Function|String} tag - Node component or label\r\n     * @param {Object} props - Properties of the label\r\n     * @param {Array} children - Children assigned to the node\r\n     */\r\n    constructor(tag, props = {}, children = []) {\r\n        this.tag = tag;\r\n        this.props = {\r\n            ...props,\r\n            children\r\n        };\r\n        this.key = this.props.key;\r\n    }\r\n    /**\r\n     * Clone the current node by keeping props and children by default\r\n     * @param {Function|String} tag -  Node component or label\r\n     * @param {*} props - Properties of the label\r\n     * @param {*} children - Children assigned to the node\r\n     */\r\n    clone(tag = this.tag, props = this.props, children = this.props.children) {\r\n        return new VDom(tag, props, children);\r\n    }\r\n}\r\n/**\r\n * Prepare the virtual node\r\n * @param {Function|String} tag\r\n * @param {Object} props\r\n * @param  {...any} children\r\n * @return {VDom}\r\n */\r\nexport function h(tag, props, ...children) {\r\n    return new VDom(tag || \"\", props, concat(children));\r\n}\r\n/**\r\n * Clean existing values in virtual-dom tree\r\n * @param {*} children\r\n * @param {*} merge\r\n */\r\nexport function concat(children, next = []) {\r\n    for (let i = 0; i < children.length; i++) {\r\n        let value = children[i];\r\n        Array.isArray(value) ? concat(value, next) : next.push(value);\r\n    }\r\n    return next;\r\n}\r\n","import { VDom } from \"./vdom\";\r\nimport { create, remove, append, replace, root } from \"./dom\";\r\nexport { h } from \"./vdom\";\r\n\r\nlet CURRENT_COMPONENT;\r\nlet CURRENT_KEY_STATE;\r\n\r\nexport let options = {\r\n    delay: 1\r\n};\r\n\r\nexport let COMPONENTS = \"__components__\";\r\n\r\n/**\r\n * Master is the mark to store the previous state\r\n * and if the node is controlled by one or more components\r\n */\r\nexport let PREVIOUS = \"__previous__\";\r\n/**\r\n * Each time a component is removed from the dom,\r\n * the property is marked as true\r\n */\r\nexport let REMOVE = \"__remove__\";\r\n\r\nexport let LISTENERS = \"__listeners__\";\r\n\r\n/**\r\n * Special properties of virtual dom,\r\n * these are ignored from the diffProps process,\r\n * since it is part of the component's life cycle\r\n */\r\n\r\nexport let IGNORE = /^(context|state|children|(create|update|remove)(d){0,1}|xmlns|key)$/;\r\n/**\r\n * It allows to print the status of virtual dom on the planned configuration\r\n * @param {VDom} next - the next state of the node\r\n * @param {HTMLElement} parent - the container of the node\r\n * @param {HTMLElement} [child]  - the ancestor of the node\r\n * @param {object} [context] - the context of the node\r\n * @param {boolean} [isSvg] - check if the node belongs to a svg unit, to control it as such\r\n * @returns {HTMLElement} - The current node\r\n */\r\nexport function render(next, parent, child, context, isSvg) {\r\n    return diff(root(parent), child, next, context, isSvg);\r\n}\r\n/**\r\n * execute a callback based on setTimeout, this is to avoid an\r\n * overload before the mamipulation of the state\r\n * @param {Function} handler\r\n */\r\nexport function defer(handler) {\r\n    setTimeout(handler, options.delay);\r\n}\r\n/**\r\n * It allows to execute a property of the virtual-dom,\r\n * this function has a use focused on the life cycle of the node\r\n * @param {VDom} vdom\r\n * @param {string} prop\r\n * @param  {...any} args\r\n */\r\nexport function emit(vdom, prop, ...args) {\r\n    if (vdom.removed) return;\r\n    if (vdom.remove && prop !== \"removed\") return;\r\n    if (prop === \"remove\") vdom.remove = true;\r\n    if (prop === \"removed\") vdom.removed = true;\r\n    if (vdom.props[prop]) vdom.props[prop](...args);\r\n}\r\n/**\r\n * Allows you to add an observer status of changes to the functional component\r\n * @param {*} initialState - Initial state to register\r\n */\r\nexport function useState(initialState) {\r\n    let key = CURRENT_KEY_STATE++,\r\n        use = CURRENT_COMPONENT;\r\n    if (!(key in use.states)) {\r\n        use.states.push(\r\n            typeof initialState === \"function\" ? initialState() : initialState\r\n        );\r\n    }\r\n    return [\r\n        use.states[key],\r\n        nextState => {\r\n            use.states[key] = nextState;\r\n            if (use.prevent) return;\r\n            defer(() => {\r\n                use.render();\r\n                use.prevent = false;\r\n            });\r\n            use.prevent = true;\r\n        },\r\n        () => use.states[key]\r\n    ];\r\n}\r\n/**\r\n * allows to add an observer effect before the changes of the component\r\n * @param {Function} handler\r\n */\r\nexport function useEffect(handler) {\r\n    CURRENT_COMPONENT.effects[0].push(handler);\r\n}\r\n/**\r\n *\r\n * @param {Function} component  - Function that controls the node\r\n * @param {boolean} isSvg - Create components for a group of svg\r\n * @param {number} deep - Depth of the component\r\n * @param {number} currentKey - current depth level\r\n * @param {object} currentComponents\r\n */\r\nexport class Component {\r\n    constructor(tag, isSvg, deep, currentComponents) {\r\n        this.base;\r\n        this.parent;\r\n        this.tag = tag;\r\n        this.props = {};\r\n        this.states = [];\r\n        this.effects = [];\r\n        this.context = {};\r\n        this.prevent = false;\r\n        this.render = rebuild => {\r\n            //if (this.prevent) return this.base;\r\n            if (this.base[REMOVE]) return;\r\n\r\n            CURRENT_KEY_STATE = 0;\r\n            CURRENT_COMPONENT = this;\r\n\r\n            this.effects = [[], []];\r\n\r\n            let nextStateRender = tag(this.props, this.context);\r\n\r\n            CURRENT_COMPONENT = false;\r\n\r\n            this.base = diff(\r\n                this.parent,\r\n                this.base,\r\n                nextStateRender,\r\n                this.context,\r\n                isSvg,\r\n                rebuild,\r\n                deep + 1,\r\n                currentComponents\r\n            );\r\n\r\n            this.effects[1] = this.effects[0].map(handler => handler());\r\n\r\n            return this.base;\r\n        };\r\n    }\r\n}\r\n/**\r\n * It allows to print the status of virtual dom on the planned configuration\r\n * @param {HTMLElement} parent - the container of the node\r\n * @param {HTMLElement} [node]  - the ancestor of the node\r\n * @param {VDom} next - the next state of the node\r\n * @param {Object} [context] - the context of the node\r\n * @param {boolean} [isSvg] - check if the node belongs to a svg unit, to control it as such\r\n * @param {number} [deep] - this is a depth marker used to generate an index to store the state of the component\r\n * @param {number} [currentKey] - when generating a component of high order, it has a currentKey\r\n *                                other than 0, this allows to point to the state of the component correctly\r\n * @param {object} [currentComponents] - the functional components are stored in an object created by the first component\r\n * @returns {HTMLElement} - The current node\r\n */\r\n\r\nexport function diff(\r\n    parent,\r\n    node,\r\n    next,\r\n    context = {},\r\n    isSvg,\r\n    rebuild,\r\n    deep = 0,\r\n    currentComponents = []\r\n) {\r\n    let prev = (node && node[PREVIOUS]) || new VDom(),\r\n        components = (node && node[COMPONENTS]) || currentComponents,\r\n        base = node,\r\n        isCreate,\r\n        component,\r\n        withUpdate = true;\r\n\r\n    if (prev === next) return base;\r\n\r\n    if (!(next instanceof VDom)) {\r\n        next = new VDom(\"\", {}, next);\r\n    }\r\n\r\n    let children = next.props.children,\r\n        addContext = next.props.context;\r\n\r\n    context = addContext ? { ...context, ...addContext } : context;\r\n\r\n    isSvg = next.tag === \"svg\" || isSvg;\r\n\r\n    /**\r\n     *\r\n     */\r\n    if (components[deep] && components[deep].tag !== next.tag) {\r\n        removeComponents(components.splice(deep));\r\n    }\r\n\r\n    if (typeof next.tag === \"function\") {\r\n        if ((components[deep] || {}).tag !== next.tag) {\r\n            components[deep] = new Component(next.tag, isSvg, deep, components);\r\n        }\r\n        component = components[deep];\r\n        next = next.clone(prev.tag || \"\");\r\n    }\r\n\r\n    if (prev.tag !== next.tag) {\r\n        base = create(next.tag, isSvg);\r\n        if (node) {\r\n            if (!component && next.tag) {\r\n                let length = children.length;\r\n                while (node.firstChild) {\r\n                    if (!length--) break;\r\n                    append(base, node.firstChild);\r\n                }\r\n            }\r\n            if (!component && prev.tag) {\r\n                recollectNodeTree(node);\r\n            }\r\n            replace(parent, base, node);\r\n        } else {\r\n            append(parent, base);\r\n        }\r\n        isCreate = true;\r\n        if (!component) emit(next, \"create\", base);\r\n    }\r\n\r\n    if (component) {\r\n        component.base = base;\r\n        component.parent = parent;\r\n        component.props = next.props;\r\n        component.context = context;\r\n\r\n        //if (deep && component.prevent) {\r\n        if (component.prevent) {\r\n            return component.base;\r\n        }\r\n\r\n        return component.render(rebuild);\r\n    } else if (next.tag) {\r\n        withUpdate =\r\n            emit(next, \"update\", base, prev.props, next.props) !== false;\r\n        if (isCreate || withUpdate) {\r\n            diffProps(\r\n                base,\r\n                prev.tag === next.tag ? prev.props : {},\r\n                next.props,\r\n                isSvg\r\n            );\r\n            let nextParent = next.props.scoped ? root(base) : base,\r\n                childNodes = nextParent.childNodes,\r\n                move = 0,\r\n                length,\r\n                ignore = {},\r\n                prevChildrenKeys = {};\r\n\r\n            for (let i = 0; i < childNodes.length; i++) {\r\n                let childNode = childNodes[i],\r\n                    prev = childNode[PREVIOUS],\r\n                    key = prev && prev.key !== undefined ? prev.key : i;\r\n                prevChildrenKeys[key] = childNode;\r\n            }\r\n\r\n            for (let i = 0; i < children.length; i++) {\r\n                let child = children[i],\r\n                    useChildKey =\r\n                        child instanceof VDom && child.key !== undefined,\r\n                    key = useChildKey ? child.key : i,\r\n                    childNode = prevChildrenKeys[key];\r\n                diff(\r\n                    nextParent,\r\n                    childNode,\r\n                    child,\r\n                    context,\r\n                    isSvg,\r\n                    useChildKey ? child.key !== key : rebuild\r\n                );\r\n                delete prevChildrenKeys[key];\r\n            }\r\n\r\n            for (let key in prevChildrenKeys) {\r\n                let childNode = prevChildrenKeys[key];\r\n                recollectNodeTree(childNode);\r\n                remove(nextParent, childNode);\r\n            }\r\n        }\r\n    } else {\r\n        if (prev.props.children !== next.props.children) {\r\n            base.textContent = next.props.children;\r\n        }\r\n    }\r\n\r\n    base[PREVIOUS] = withUpdate ? next : prev;\r\n    base[COMPONENTS] = components;\r\n\r\n    emit(next, isCreate ? \"created\" : \"updated\", base);\r\n\r\n    return base;\r\n}\r\n/**\r\n * Update or delete the attributes and events of a node\r\n * @param {HTMLElement} node - Node to assign changes\r\n * @param {Object} prev - Previous status of attributes\r\n * @param {Object} next - next status of attributes\r\n * @param {Boolean} [isSvg] - If it belongs to svg tree\r\n */\r\nexport function diffProps(node, prev, next, isSvg) {\r\n    let prevKeys = Object.keys(prev),\r\n        nextKeys = Object.keys(next),\r\n        keys = prevKeys.concat(nextKeys),\r\n        define = {};\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n        let prop = keys[i];\r\n\r\n        if (define[prop] || prev[prop] === next[prop] || IGNORE.test(prop))\r\n            continue;\r\n\r\n        define[prop] = true;\r\n\r\n        if (\"scoped\" === prop && \"attachShadow\" in node) {\r\n            node.attachShadow({ mode: next[prop] ? \"open\" : \"closed\" });\r\n            continue;\r\n        }\r\n\r\n        let isFnPrev = typeof prev[prop] === \"function\",\r\n            isFnNext = typeof next[prop] === \"function\";\r\n\r\n        if (isFnPrev || isFnNext) {\r\n            if (!isFnNext && isFnPrev) {\r\n                node.removeEventListener(prop, node[LISTENERS][prop][0]);\r\n            }\r\n            if (isFnNext) {\r\n                if (!isFnPrev) {\r\n                    node[LISTENERS] = node[LISTENERS] || {};\r\n                    if (!node[LISTENERS][prop]) {\r\n                        node[LISTENERS][prop] = [\r\n                            event => {\r\n                                node[LISTENERS][prop][1](event);\r\n                            }\r\n                        ];\r\n                    }\r\n                    node.addEventListener(prop, node[LISTENERS][prop][0]);\r\n                }\r\n                node[LISTENERS][prop][1] = next[prop];\r\n            }\r\n        } else if (prop in next) {\r\n            if ((prop in node && !isSvg) || (isSvg && prop === \"style\")) {\r\n                if (prop === \"style\") {\r\n                    if (typeof next[prop] === \"object\") {\r\n                        let prevStyle = prev[prop] || {},\r\n                            nextStyle = next[prop];\r\n                        for (let prop in nextStyle) {\r\n                            if (prevStyle[prop] !== nextStyle[prop]) {\r\n                                if (prop[0] === \"-\") {\r\n                                    node.style.setProperty(\r\n                                        prop,\r\n                                        nextStyle[prop]\r\n                                    );\r\n                                } else {\r\n                                    node.style[prop] = nextStyle[prop];\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        node.style.cssText = next[prop];\r\n                    }\r\n                } else {\r\n                    node[prop] = next[prop];\r\n                }\r\n            } else {\r\n                isSvg\r\n                    ? node.setAttributeNS(null, prop, next[prop])\r\n                    : node.setAttribute(prop, next[prop]);\r\n            }\r\n        } else {\r\n            node.removeAttribute(prop);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Issues the deletion of node and its children\r\n * @param {HTMLElement} node\r\n */\r\nexport function recollectNodeTree(node) {\r\n    let prev = node[PREVIOUS],\r\n        components = node[COMPONENTS],\r\n        children = node.childNodes;\r\n\r\n    if (!prev) return;\r\n\r\n    node[REMOVE] = true;\r\n\r\n    emit(prev, \"remove\", node);\r\n\r\n    removeComponents(components);\r\n\r\n    for (let i = 0; i < children.length; i++) {\r\n        recollectNodeTree(children[i]);\r\n    }\r\n\r\n    emit(prev, \"removed\", node);\r\n}\r\n\r\nexport function removeComponents(components) {\r\n    for (let i = 0; i < components.length; i++) {\r\n        let component = components[i],\r\n            effectsRemove = component.effects[1];\r\n        for (let i = 0; i < effectsRemove.length; i++) {\r\n            if (effectsRemove[i]) effectsRemove[i]();\r\n        }\r\n    }\r\n}\r\n","export function create(tag, isSvg) {\r\n    if (tag) {\r\n        return isSvg\r\n            ? document.createElementNS(\"http://www.w3.org/2000/svg\", tag)\r\n            : document.createElement(tag);\r\n    } else {\r\n        return document.createTextNode(\"\");\r\n    }\r\n}\r\n\r\nexport function root(parent) {\r\n    return parent.shadowRoot || parent;\r\n}\r\nexport function remove(parent, child) {\r\n    parent.removeChild(child);\r\n}\r\n\r\nexport function append(parent, child) {\r\n    parent.appendChild(child);\r\n}\r\n\r\nexport function replace(parent, newChild, oldChild) {\r\n    parent.replaceChild(newChild, oldChild);\r\n}\r\n"],"names":["CURRENT_COMPONENT","CURRENT_KEY_STATE","VDom","tag","props","children","this","Object","key","h","concat","next","let","i","length","value","Array","isArray","push","root","parent","shadowRoot","remove","child","removeChild","append","appendChild","clone","options","delay","COMPONENTS","PREVIOUS","REMOVE","LISTENERS","IGNORE","render","context","isSvg","diff","emit","vdom","prop","removed","ref","args","useState","initialState","use","states","nextState","prevent","setTimeout","useEffect","handler","effects","Component","deep","currentComponents","rebuild","base","nextStateRender","map","node","isCreate","component","prev","components","withUpdate","addContext","removeComponents","splice","document","createElementNS","createElement","createTextNode","create","firstChild","recollectNodeTree","newChild","oldChild","replaceChild","replace","prevKeys","keys","nextKeys","define","test","attachShadow","mode","isFnPrev","isFnNext","removeEventListener","event","addEventListener","prevStyle","nextStyle","style","setProperty","cssText","setAttributeNS","setAttribute","removeAttribute","diffProps","nextParent","scoped","childNodes","prevChildrenKeys","childNode","undefined","useChildKey","textContent","effectsRemove"],"mappings":"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"}