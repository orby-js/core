{"version":3,"file":"orby.m.js","sources":["../src/vdom.js","../src/diff.js","../src/dom.js"],"sourcesContent":["export class VDom {\r\n    /**\r\n     *\r\n     * @param {Function|String} tag - Node component or label\r\n     * @param {Object} props - Properties of the label\r\n     * @param {Array} children - Children assigned to the node\r\n     */\r\n    constructor(tag, props = {}, children = []) {\r\n        this.tag = tag;\r\n        this.props = {\r\n            ...props,\r\n            children\r\n        };\r\n        this.key = this.props.key;\r\n    }\r\n    /**\r\n     * Clone the current node by keeping props and children by default\r\n     * @param {Function|String} tag -  Node component or label\r\n     * @param {*} props - Properties of the label\r\n     * @param {*} children - Children assigned to the node\r\n     */\r\n    clone(tag = this.tag, props = this.props, children = this.props.children) {\r\n        return new VDom(tag, props, children);\r\n    }\r\n}\r\n/**\r\n * Prepare the virtual node\r\n * @param {Function|String} tag\r\n * @param {Object} props\r\n * @param  {...any} children\r\n * @return {VDom}\r\n */\r\nexport function h(tag, props, ...children) {\r\n    return new VDom(tag || \"\", props, concat(children));\r\n}\r\n/**\r\n * Clean existing values in virtual-dom tree\r\n * @param {*} children\r\n * @param {*} merge\r\n */\r\nexport function concat(children, next = []) {\r\n    let length = children.length;\r\n    for (let i = 0; i < length; i++) {\r\n        let value = children[i];\r\n        Array.isArray(value) ? concat(value, next) : next.push(value);\r\n    }\r\n    return next;\r\n}\r\n","import { VDom } from \"./vdom\";\r\nimport { create, remove, append, replace, root, before } from \"./dom\";\r\nexport { h } from \"./vdom\";\r\n\r\nlet CURRENT_COMPONENT;\r\nlet CURRENT_KEY_STATE;\r\n\r\nexport let options = {\r\n    delay: 1\r\n};\r\n\r\nexport let COMPONENTS = \"__components__\";\r\n\r\n/**\r\n * Master is the mark to store the previous state\r\n * and if the node is controlled by one or more components\r\n */\r\nexport let PREVIOUS = \"__previous__\";\r\n/**\r\n * Each time a component is removed from the dom,\r\n * the property is marked as true\r\n */\r\nexport let REMOVE = \"__remove__\";\r\n\r\nexport let LISTENERS = \"__listeners__\";\r\n\r\n/**\r\n * Special properties of virtual dom,\r\n * these are ignored from the diffProps process,\r\n * since it is part of the component's life cycle\r\n */\r\n\r\nexport let IGNORE = /^(context|state|children|(on){0,1}(create|update|remove)(d){0,1}|xmlns|key)$/;\r\n/**\r\n * It allows to print the status of virtual dom on the planned configuration\r\n * @param {VDom} next - the next state of the node\r\n * @param {HTMLElement} parent - the container of the node\r\n * @param {HTMLElement} [child]  - the ancestor of the node\r\n * @param {object} [context] - the context of the node\r\n * @param {boolean} [isSvg] - check if the node belongs to a svg unit, to control it as such\r\n * @returns {HTMLElement} - The current node\r\n */\r\nexport function render(next, parent, child, context, isSvg) {\r\n    return diff(root(parent), child, false, next, context, isSvg);\r\n}\r\n/**\r\n * execute a callback based on setTimeout, this is to avoid an\r\n * overload before the mamipulation of the state\r\n * @param {Function} handler\r\n */\r\nexport function defer(handler) {\r\n    setTimeout(handler, options.delay);\r\n}\r\n/**\r\n * It allows to execute a property of the virtual-dom,\r\n * this function has a use focused on the life cycle of the node\r\n * @param {VDom} vdom\r\n * @param {string} prop\r\n * @param  {...any} args\r\n */\r\nexport function emit(vdom, prop, ...args) {\r\n    if (vdom.removed) return;\r\n    if (vdom.remove && prop !== \"removed\") return;\r\n    if (prop === \"remove\") vdom.remove = true;\r\n    if (prop === \"removed\") vdom.removed = true;\r\n    if (vdom.props[prop]) vdom.props[prop](...args);\r\n}\r\n/**\r\n * Allows you to add an observer status of changes to the functional component\r\n * @param {*} initialState - Initial state to register\r\n */\r\nexport function useState(initialState) {\r\n    let key = CURRENT_KEY_STATE++,\r\n        use = CURRENT_COMPONENT;\r\n    if (!(key in use.states)) {\r\n        use.states.push(\r\n            typeof initialState === \"function\" ? initialState() : initialState\r\n        );\r\n    }\r\n    return [\r\n        use.states[key],\r\n        nextState => {\r\n            use.states[key] = nextState;\r\n            if (use.prevent) return;\r\n            defer(() => {\r\n                use.render();\r\n                use.prevent = false;\r\n            });\r\n            use.prevent = true;\r\n        },\r\n        () => use.states[key]\r\n    ];\r\n}\r\n/**\r\n * allows to add an observer effect before the changes of the component\r\n * @param {Function} handler\r\n */\r\nexport function useEffect(handler) {\r\n    CURRENT_COMPONENT.effects[0].push(handler);\r\n}\r\n/**\r\n *\r\n * @param {Function} component  - Function that controls the node\r\n * @param {boolean} isSvg - Create components for a group of svg\r\n * @param {number} deep - Depth of the component\r\n * @param {number} currentKey - current depth level\r\n * @param {object} currentComponents\r\n */\r\nexport class Component {\r\n    constructor(tag, isSvg, deep, currentComponents) {\r\n        this.base;\r\n        this.parent;\r\n        this.tag = tag;\r\n        this.props = {};\r\n        this.states = [];\r\n        this.effects = [];\r\n        this.context = {};\r\n        this.prevent = false;\r\n        this.render = () => {\r\n            //if (this.prevent) return this.base;\r\n            if (this.base[REMOVE]) return;\r\n\r\n            CURRENT_KEY_STATE = 0;\r\n            CURRENT_COMPONENT = this;\r\n\r\n            this.effects = [[], []];\r\n\r\n            let nextStateRender = tag(this.props, this.context);\r\n\r\n            CURRENT_COMPONENT = false;\r\n\r\n            this.base = diff(\r\n                this.parent,\r\n                this.base,\r\n                false,\r\n                nextStateRender,\r\n                this.context,\r\n                isSvg,\r\n                deep + 1,\r\n                currentComponents\r\n            );\r\n\r\n            this.effects[1] = this.effects[0].map(handler => handler());\r\n\r\n            return this.base;\r\n        };\r\n    }\r\n}\r\n/**\r\n * It allows to print the status of virtual dom on the planned configuration\r\n * @param {HTMLElement} parent - the container of the node\r\n * @param {HTMLElement} [node]  - the ancestor of the node\r\n * @param {VDom} next - the next state of the node\r\n * @param {Object} [context] - the context of the node\r\n * @param {boolean} [isSvg] - check if the node belongs to a svg unit, to control it as such\r\n * @param {number} [deep] - this is a depth marker used to generate an index to store the state of the component\r\n * @param {number} [currentKey] - when generating a component of high order, it has a currentKey\r\n *                                other than 0, this allows to point to the state of the component correctly\r\n * @param {object} [currentComponents] - the functional components are stored in an object created by the first component\r\n * @returns {HTMLElement} - The current node\r\n */\r\n\r\nexport function diff(\r\n    parent,\r\n    node,\r\n    nodeSibling,\r\n    next,\r\n    context = {},\r\n    isSvg,\r\n    deep = 0,\r\n    currentComponents = []\r\n) {\r\n    let prev = (node && node[PREVIOUS]) || new VDom(),\r\n        components = (node && node[COMPONENTS]) || currentComponents,\r\n        base = node,\r\n        isCreate,\r\n        component,\r\n        withUpdate = true;\r\n\r\n    if (prev === next) return base;\r\n\r\n    if (!(next instanceof VDom)) {\r\n        next = new VDom(\"\", {}, next);\r\n    }\r\n\r\n    let children = next.props.children,\r\n        addContext = next.props.context;\r\n\r\n    context = addContext ? { ...context, ...addContext } : context;\r\n\r\n    isSvg = next.tag === \"svg\" || isSvg;\r\n\r\n    if (components[deep] && components[deep].tag !== next.tag) {\r\n        removeComponents(components.splice(deep));\r\n    }\r\n\r\n    if (typeof next.tag === \"function\") {\r\n        if ((components[deep] || {}).tag !== next.tag) {\r\n            components[deep] = new Component(next.tag, isSvg, deep, components);\r\n        }\r\n        component = components[deep];\r\n        next = next.clone(prev.tag || \"\");\r\n    }\r\n\r\n    if (prev.tag !== next.tag) {\r\n        base = create(next.tag, isSvg);\r\n        if (node) {\r\n            if (!component && next.tag) {\r\n                while (node.firstChild) {\r\n                    append(base, node.firstChild);\r\n                }\r\n            }\r\n            if (!component && prev.tag) {\r\n                recollectNodeTree(node);\r\n            }\r\n            replace(parent, base, node);\r\n        } else {\r\n            (nodeSibling ? before : append)(parent, base, nodeSibling);\r\n        }\r\n        isCreate = true;\r\n        if (!component) emit(next, \"create\", base);\r\n    }\r\n\r\n    if (component) {\r\n        component.base = base;\r\n        component.parent = parent;\r\n        component.props = next.props;\r\n        component.context = context;\r\n\r\n        //if (deep && component.prevent) {\r\n        if (component.prevent) {\r\n            return component.base;\r\n        }\r\n\r\n        return component.render();\r\n    } else if (next.tag) {\r\n        withUpdate =\r\n            emit(next, \"update\", base, prev.props, next.props) !== false;\r\n        if (isCreate || withUpdate) {\r\n            diffProps(\r\n                base,\r\n                prev.tag === next.tag ? prev.props : {},\r\n                next.props,\r\n                isSvg\r\n            );\r\n            let nextParent = next.props.scoped ? root(base) : base,\r\n                childNodes = nextParent.childNodes,\r\n                childrenLength = children.length,\r\n                childNodesLenght = childNodes.length,\r\n                childrenByKey = {},\r\n                index = 0;\r\n            for (let index = 0; index < childNodesLenght; index++) {\r\n                let node = childNodes[index],\r\n                    prev = node[PREVIOUS],\r\n                    useKey = prev && prev.key !== undefined,\r\n                    key = useKey ? prev.key : index;\r\n\r\n                childrenByKey[key] = {\r\n                    node,\r\n                    index,\r\n                    useKey\r\n                };\r\n            }\r\n            for (let i = 0; i < childrenLength; i++) {\r\n                let child = children[i],\r\n                    useKey = child instanceof VDom && child.key !== undefined,\r\n                    key = useKey ? child.key : i,\r\n                    childNode = childrenByKey[key] || {};\r\n\r\n                if (childNode.useKey && childNode.node !== childNodes[i]) {\r\n                    before(nextParent, childNode.node, childNodes[i]);\r\n                }\r\n\r\n                diff(\r\n                    nextParent,\r\n                    childNode.node,\r\n                    childNodes[i],\r\n                    child,\r\n                    context,\r\n                    isSvg\r\n                );\r\n\r\n                delete childrenByKey[key];\r\n            }\r\n            for (let key in childrenByKey) {\r\n                let childNode = childrenByKey[key];\r\n                recollectNodeTree(childNode.node);\r\n                remove(nextParent, childNode.node);\r\n            }\r\n        }\r\n    } else {\r\n        if (prev.props.children !== next.props.children) {\r\n            base.textContent = next.props.children;\r\n        }\r\n    }\r\n\r\n    base[PREVIOUS] = withUpdate ? next : prev;\r\n    base[COMPONENTS] = components;\r\n\r\n    emit(next, isCreate ? \"created\" : \"updated\", base);\r\n\r\n    return base;\r\n}\r\n/**\r\n * Update or delete the attributes and events of a node\r\n * @param {HTMLElement} node - Node to assign changes\r\n * @param {Object} prev - Previous status of attributes\r\n * @param {Object} next - next status of attributes\r\n * @param {Boolean} [isSvg] - If it belongs to svg tree\r\n */\r\nexport function diffProps(node, prev, next, isSvg) {\r\n    let prevKeys = Object.keys(prev),\r\n        nextKeys = Object.keys(next),\r\n        keys = prevKeys.concat(nextKeys),\r\n        length = keys.length,\r\n        ignore = {};\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        let prop = keys[i],\r\n            prevValue = prev[prop],\r\n            nextValue = next[prop];\r\n\r\n        if (ignore[prop] || prevValue === nextValue || IGNORE.test(prop))\r\n            continue;\r\n\r\n        ignore[prop] = true;\r\n\r\n        if (prop === \"class\" && !svg) {\r\n            prop = \"className\";\r\n            nextValue = nextValue || \"\";\r\n            prevValue = prevValue || \"\";\r\n        }\r\n\r\n        if (\"scoped\" === prop && \"attachShadow\" in node) {\r\n            node.attachShadow({ mode: nextValue ? \"open\" : \"closed\" });\r\n            continue;\r\n        }\r\n\r\n        let isFnPrev = typeof prevValue === \"function\",\r\n            isFnNext = typeof nextValue === \"function\";\r\n\r\n        if (isFnPrev || isFnNext) {\r\n            prop = prop.replace(/on(\\w)/, (all, letter) =>\r\n                letter.toLowerCase()\r\n            );\r\n            if (!isFnNext && isFnPrev) {\r\n                node.removeEventListener(prop, node[LISTENERS][prop][0]);\r\n            }\r\n            if (isFnNext) {\r\n                if (!isFnPrev) {\r\n                    node[LISTENERS] = node[LISTENERS] || {};\r\n                    if (!node[LISTENERS][prop]) {\r\n                        node[LISTENERS][prop] = [\r\n                            event => {\r\n                                node[LISTENERS][prop][1](event);\r\n                            }\r\n                        ];\r\n                    }\r\n                    node.addEventListener(prop, node[LISTENERS][prop][0]);\r\n                }\r\n                node[LISTENERS][prop][1] = nextValue;\r\n            }\r\n        } else if (prop in next) {\r\n            if ((prop in node && !isSvg) || (isSvg && prop === \"style\")) {\r\n                if (prop === \"style\") {\r\n                    if (typeof nextValue === \"object\") {\r\n                        let prevStyle = prevValue || {},\r\n                            nextStyle = nextValue;\r\n                        for (let prop in nextStyle) {\r\n                            if (prevStyle[prop] !== nextStyle[prop]) {\r\n                                if (prop[0] === \"-\") {\r\n                                    node.style.setProperty(\r\n                                        prop,\r\n                                        nextStyle[prop]\r\n                                    );\r\n                                } else {\r\n                                    node.style[prop] = nextStyle[prop];\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        node.style.cssText = nextValue;\r\n                    }\r\n                } else {\r\n                    node[prop] = nextValue;\r\n                }\r\n            } else {\r\n                isSvg\r\n                    ? node.setAttributeNS(null, prop, nextValue)\r\n                    : node.setAttribute(prop, nextValue);\r\n            }\r\n        } else {\r\n            node.removeAttribute(prop);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Issues the deletion of node and its children\r\n * @param {HTMLElement} node\r\n */\r\nexport function recollectNodeTree(node) {\r\n    let prev = node[PREVIOUS],\r\n        components = node[COMPONENTS],\r\n        children = node.childNodes,\r\n        length;\r\n\r\n    if (!prev) return;\r\n\r\n    node[REMOVE] = true;\r\n\r\n    emit(prev, \"remove\", node);\r\n\r\n    removeComponents(components);\r\n\r\n    length = children.length;\r\n    for (let i = 0; i < length; i++) {\r\n        recollectNodeTree(children[i]);\r\n    }\r\n\r\n    emit(prev, \"removed\", node);\r\n}\r\n\r\nexport function removeComponents(components) {\r\n    let length = components.length;\r\n    for (let i = 0; i < length; i++) {\r\n        let component = components[i],\r\n            effectsRemove = component.effects[1],\r\n            effectsLength = effectsRemove.length;\r\n        for (let i = 0; i < effectsLength; i++) {\r\n            if (effectsRemove[i]) effectsRemove[i]();\r\n        }\r\n    }\r\n}\r\n","export function create(tag, isSvg) {\r\n    if (tag) {\r\n        return isSvg\r\n            ? document.createElementNS(\"http://www.w3.org/2000/svg\", tag)\r\n            : document.createElement(tag);\r\n    } else {\r\n        return document.createTextNode(\"\");\r\n    }\r\n}\r\n\r\nexport function root(parent) {\r\n    return parent.shadowRoot || parent;\r\n}\r\nexport function remove(parent, child) {\r\n    parent.removeChild(child);\r\n}\r\n\r\nexport function append(parent, child) {\r\n    parent.appendChild(child);\r\n}\r\n\r\nexport function replace(parent, newChild, oldChild) {\r\n    parent.replaceChild(newChild, oldChild);\r\n}\r\n\r\nexport function before(parent, newChild, oldChild) {\r\n    parent.insertBefore(newChild, oldChild);\r\n}\r\n"],"names":["CURRENT_COMPONENT","CURRENT_KEY_STATE","VDom","tag","props","children","this","Object","key","h","concat","next","let","length","i","value","Array","isArray","push","root","parent","shadowRoot","remove","child","removeChild","append","appendChild","before","newChild","oldChild","insertBefore","clone","options","delay","COMPONENTS","PREVIOUS","REMOVE","LISTENERS","IGNORE","render","context","isSvg","diff","emit","vdom","prop","removed","ref","args","useState","initialState","use","states","nextState","prevent","setTimeout","useEffect","handler","effects","Component","deep","currentComponents","base","nextStateRender","map","node","nodeSibling","isCreate","component","prev","components","withUpdate","addContext","removeComponents","splice","document","createElementNS","createElement","createTextNode","create","firstChild","recollectNodeTree","replaceChild","replace","prevKeys","keys","nextKeys","ignore","prevValue","nextValue","test","svg","attachShadow","mode","isFnPrev","isFnNext","all","letter","toLowerCase","removeEventListener","event","addEventListener","prevStyle","nextStyle","style","setProperty","cssText","setAttributeNS","setAttribute","removeAttribute","diffProps","nextParent","scoped","childNodes","childrenLength","childNodesLenght","childrenByKey","index","useKey","undefined","childNode","textContent","effectsRemove","effectsLength"],"mappings":"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"}