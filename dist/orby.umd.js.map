{"version":3,"file":"orby.umd.js","sources":["../src/vdom.js","../src/diff.js","../src/dom.js"],"sourcesContent":["export class VDom {\r\n    /**\r\n     *\r\n     * @param {Function|String} tag - Node component or label\r\n     * @param {Object} props - Properties of the label\r\n     * @param {Array} children - Children assigned to the node\r\n     */\r\n    constructor(tag, props = {}, children = []) {\r\n        this.tag = tag;\r\n        this.props = {\r\n            ...props,\r\n            children\r\n        };\r\n        this.key = this.props.key;\r\n    }\r\n    /**\r\n     * Clone the current node by keeping props and children by default\r\n     * @param {Function|String} tag -  Node component or label\r\n     * @param {*} props - Properties of the label\r\n     * @param {*} children - Children assigned to the node\r\n     */\r\n    clone(tag = this.tag, props = this.props, children = this.props.children) {\r\n        return new VDom(tag, props, children);\r\n    }\r\n}\r\n/**\r\n * Prepare the virtual node\r\n * @param {Function|String} tag\r\n * @param {Object} props\r\n * @param  {...any} children\r\n * @return {VDom}\r\n */\r\nexport function h(tag, props, ...children) {\r\n    return new VDom(tag || \"\", props, concat(children));\r\n}\r\n/**\r\n * Clean existing values in virtual-dom tree\r\n * @param {*} children\r\n * @param {*} merge\r\n */\r\nexport function concat(children, next = []) {\r\n    let length = children.length;\r\n    for (let i = 0; i < length; i++) {\r\n        let value = children[i];\r\n        Array.isArray(value) ? concat(value, next) : next.push(value);\r\n    }\r\n    return next;\r\n}\r\n","import { VDom } from \"./vdom\";\r\nimport { create, remove, append, replace, root, before } from \"./dom\";\r\nexport { h } from \"./vdom\";\r\n\r\nlet CURRENT_COMPONENT;\r\nlet CURRENT_KEY_STATE;\r\n\r\nexport let options = {\r\n    delay: 1\r\n};\r\n\r\nexport let COMPONENTS = \"__components__\";\r\n\r\n/**\r\n * Master is the mark to store the previous state\r\n * and if the node is controlled by one or more components\r\n */\r\nexport let PREVIOUS = \"__previous__\";\r\n/**\r\n * Each time a component is removed from the dom,\r\n * the property is marked as true\r\n */\r\nexport let REMOVE = \"__remove__\";\r\n\r\nexport let LISTENERS = \"__listeners__\";\r\n\r\n/**\r\n * Special properties of virtual dom,\r\n * these are ignored from the diffProps process,\r\n * since it is part of the component's life cycle\r\n */\r\n\r\nexport let IGNORE = /^(context|state|children|(on){0,1}(create|update|remove)(d){0,1}|xmlns|key)$/;\r\n/**\r\n * It allows to print the status of virtual dom on the planned configuration\r\n * @param {VDom} next - the next state of the node\r\n * @param {HTMLElement} parent - the container of the node\r\n * @param {HTMLElement} [child]  - the ancestor of the node\r\n * @param {object} [context] - the context of the node\r\n * @param {boolean} [isSvg] - check if the node belongs to a svg unit, to control it as such\r\n * @returns {HTMLElement} - The current node\r\n */\r\nexport function render(next, parent, child, context, isSvg) {\r\n    return diff(root(parent), child, false, next, context, isSvg);\r\n}\r\n/**\r\n * execute a callback based on setTimeout, this is to avoid an\r\n * overload before the mamipulation of the state\r\n * @param {Function} handler\r\n */\r\nexport function defer(handler) {\r\n    setTimeout(handler, options.delay);\r\n}\r\n/**\r\n * It allows to execute a property of the virtual-dom,\r\n * this function has a use focused on the life cycle of the node\r\n * @param {VDom} vdom\r\n * @param {string} prop\r\n * @param  {...any} args\r\n */\r\nexport function emit(vdom, prop, ...args) {\r\n    if (vdom.removed) return;\r\n    if (vdom.remove && prop !== \"removed\") return;\r\n    if (prop === \"remove\") vdom.remove = true;\r\n    if (prop === \"removed\") vdom.removed = true;\r\n    if (vdom.props[prop]) vdom.props[prop](...args);\r\n}\r\n/**\r\n * Allows you to add an observer status of changes to the functional component\r\n * @param {*} initialState - Initial state to register\r\n */\r\nexport function useState(initialState) {\r\n    let key = CURRENT_KEY_STATE++,\r\n        use = CURRENT_COMPONENT;\r\n    if (!(key in use.states)) {\r\n        use.states.push(\r\n            typeof initialState === \"function\" ? initialState() : initialState\r\n        );\r\n    }\r\n    return [\r\n        use.states[key],\r\n        nextState => {\r\n            use.states[key] = nextState;\r\n            if (use.prevent) return;\r\n            defer(() => {\r\n                use.render();\r\n                use.prevent = false;\r\n            });\r\n            use.prevent = true;\r\n        },\r\n        () => use.states[key]\r\n    ];\r\n}\r\n/**\r\n * allows to add an observer effect before the changes of the component\r\n * @param {Function} handler\r\n */\r\nexport function useEffect(handler) {\r\n    CURRENT_COMPONENT.effects[0].push(handler);\r\n}\r\n/**\r\n *\r\n * @param {Function} component  - Function that controls the node\r\n * @param {boolean} isSvg - Create components for a group of svg\r\n * @param {number} deep - Depth of the component\r\n * @param {number} currentKey - current depth level\r\n * @param {object} currentComponents\r\n */\r\nexport class Component {\r\n    constructor(tag, isSvg, deep, currentComponents) {\r\n        this.base;\r\n        this.parent;\r\n        this.tag = tag;\r\n        this.props = {};\r\n        this.states = [];\r\n        this.effects = [];\r\n        this.context = {};\r\n        this.prevent = false;\r\n        this.render = () => {\r\n            //if (this.prevent) return this.base;\r\n            if (this.base[REMOVE]) return;\r\n\r\n            CURRENT_KEY_STATE = 0;\r\n            CURRENT_COMPONENT = this;\r\n\r\n            this.effects = [[], []];\r\n\r\n            let nextStateRender = tag(this.props, this.context);\r\n\r\n            CURRENT_COMPONENT = false;\r\n\r\n            this.base = diff(\r\n                this.parent,\r\n                this.base,\r\n                false,\r\n                nextStateRender,\r\n                this.context,\r\n                isSvg,\r\n                deep + 1,\r\n                currentComponents\r\n            );\r\n\r\n            this.effects[1] = this.effects[0].map(handler => handler());\r\n\r\n            return this.base;\r\n        };\r\n    }\r\n}\r\n/**\r\n * It allows to print the status of virtual dom on the planned configuration\r\n * @param {HTMLElement} parent - the container of the node\r\n * @param {HTMLElement} [node]  - the ancestor of the node\r\n * @param {VDom} next - the next state of the node\r\n * @param {Object} [context] - the context of the node\r\n * @param {boolean} [isSvg] - check if the node belongs to a svg unit, to control it as such\r\n * @param {number} [deep] - this is a depth marker used to generate an index to store the state of the component\r\n * @param {number} [currentKey] - when generating a component of high order, it has a currentKey\r\n *                                other than 0, this allows to point to the state of the component correctly\r\n * @param {object} [currentComponents] - the functional components are stored in an object created by the first component\r\n * @returns {HTMLElement} - The current node\r\n */\r\n\r\nexport function diff(\r\n    parent,\r\n    node,\r\n    nodeSibling,\r\n    next,\r\n    context = {},\r\n    isSvg,\r\n    deep = 0,\r\n    currentComponents = []\r\n) {\r\n    let prev = (node && node[PREVIOUS]) || new VDom(),\r\n        components = (node && node[COMPONENTS]) || currentComponents,\r\n        base = node,\r\n        isCreate,\r\n        component,\r\n        withUpdate = true;\r\n\r\n    if (prev === next) return base;\r\n\r\n    if (!(next instanceof VDom)) {\r\n        next = new VDom(\"\", {}, next);\r\n    }\r\n\r\n    let children = next.props.children,\r\n        addContext = next.props.context;\r\n\r\n    context = addContext ? { ...context, ...addContext } : context;\r\n\r\n    isSvg = next.tag === \"svg\" || isSvg;\r\n\r\n    if (components[deep] && components[deep].tag !== next.tag) {\r\n        removeComponents(components.splice(deep));\r\n    }\r\n\r\n    if (typeof next.tag === \"function\") {\r\n        if ((components[deep] || {}).tag !== next.tag) {\r\n            components[deep] = new Component(next.tag, isSvg, deep, components);\r\n        }\r\n        component = components[deep];\r\n        next = next.clone(prev.tag || \"\");\r\n    }\r\n\r\n    if (prev.tag !== next.tag) {\r\n        base = create(next.tag, isSvg);\r\n        if (node) {\r\n            if (!component && next.tag) {\r\n                while (node.firstChild) {\r\n                    append(base, node.firstChild);\r\n                }\r\n            }\r\n            if (!component && prev.tag) {\r\n                recollectNodeTree(node);\r\n            }\r\n            replace(parent, base, node);\r\n        } else {\r\n            (nodeSibling ? before : append)(parent, base, nodeSibling);\r\n        }\r\n        isCreate = true;\r\n        if (!component) emit(next, \"create\", base);\r\n    }\r\n\r\n    if (component) {\r\n        component.base = base;\r\n        component.parent = parent;\r\n        component.props = next.props;\r\n        component.context = context;\r\n\r\n        //if (deep && component.prevent) {\r\n        if (component.prevent) {\r\n            return component.base;\r\n        }\r\n\r\n        return component.render();\r\n    } else if (next.tag) {\r\n        withUpdate =\r\n            emit(next, \"update\", base, prev.props, next.props) !== false;\r\n        if (isCreate || withUpdate) {\r\n            diffProps(\r\n                base,\r\n                prev.tag === next.tag ? prev.props : {},\r\n                next.props,\r\n                isSvg\r\n            );\r\n            let nextParent = next.props.scoped ? root(base) : base,\r\n                childNodes = nextParent.childNodes,\r\n                childrenLength = children.length,\r\n                childNodesLenght = childNodes.length,\r\n                childrenByKey = {},\r\n                index = 0;\r\n            for (let index = 0; index < childNodesLenght; index++) {\r\n                let node = childNodes[index],\r\n                    prev = node[PREVIOUS],\r\n                    useKey = prev && prev.key !== undefined,\r\n                    key = useKey ? prev.key : index;\r\n\r\n                childrenByKey[key] = {\r\n                    node,\r\n                    index,\r\n                    useKey\r\n                };\r\n            }\r\n            for (let i = 0; i < childrenLength; i++) {\r\n                let child = children[i],\r\n                    useKey = child instanceof VDom && child.key !== undefined,\r\n                    key = useKey ? child.key : i,\r\n                    childNode = childrenByKey[key] || {};\r\n\r\n                if (childNode.useKey && childNode.node !== childNodes[i]) {\r\n                    before(nextParent, childNode.node, childNodes[i]);\r\n                }\r\n\r\n                diff(\r\n                    nextParent,\r\n                    childNode.node,\r\n                    childNodes[i],\r\n                    child,\r\n                    context,\r\n                    isSvg\r\n                );\r\n\r\n                delete childrenByKey[key];\r\n            }\r\n            for (let key in childrenByKey) {\r\n                let childNode = childrenByKey[key];\r\n                recollectNodeTree(childNode.node);\r\n                remove(nextParent, childNode.node);\r\n            }\r\n        }\r\n    } else {\r\n        if (prev.props.children !== next.props.children) {\r\n            base.textContent = next.props.children;\r\n        }\r\n    }\r\n\r\n    base[PREVIOUS] = withUpdate ? next : prev;\r\n    base[COMPONENTS] = components;\r\n\r\n    emit(next, isCreate ? \"created\" : \"updated\", base);\r\n\r\n    return base;\r\n}\r\n/**\r\n * Update or delete the attributes and events of a node\r\n * @param {HTMLElement} node - Node to assign changes\r\n * @param {Object} prev - Previous status of attributes\r\n * @param {Object} next - next status of attributes\r\n * @param {Boolean} [isSvg] - If it belongs to svg tree\r\n */\r\nexport function diffProps(node, prev, next, isSvg) {\r\n    let prevKeys = Object.keys(prev),\r\n        nextKeys = Object.keys(next),\r\n        keys = prevKeys.concat(nextKeys),\r\n        length = keys.length,\r\n        ignore = {};\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        let prop = keys[i],\r\n            prevValue = prev[prop],\r\n            nextValue = next[prop];\r\n\r\n        if (ignore[prop] || prevValue === nextValue || IGNORE.test(prop))\r\n            continue;\r\n\r\n        ignore[prop] = true;\r\n\r\n        if (prop === \"class\" && !svg) {\r\n            prop = \"className\";\r\n            nextValue = nextValue || \"\";\r\n            prevValue = prevValue || \"\";\r\n        }\r\n\r\n        if (\"scoped\" === prop && \"attachShadow\" in node) {\r\n            node.attachShadow({ mode: nextValue ? \"open\" : \"closed\" });\r\n            continue;\r\n        }\r\n\r\n        let isFnPrev = typeof prevValue === \"function\",\r\n            isFnNext = typeof nextValue === \"function\";\r\n\r\n        if (isFnPrev || isFnNext) {\r\n            prop = prop.replace(/on(\\w)/, (all, letter) =>\r\n                letter.toLowerCase()\r\n            );\r\n            if (!isFnNext && isFnPrev) {\r\n                node.removeEventListener(prop, node[LISTENERS][prop][0]);\r\n            }\r\n            if (isFnNext) {\r\n                if (!isFnPrev) {\r\n                    node[LISTENERS] = node[LISTENERS] || {};\r\n                    if (!node[LISTENERS][prop]) {\r\n                        node[LISTENERS][prop] = [\r\n                            event => {\r\n                                node[LISTENERS][prop][1](event);\r\n                            }\r\n                        ];\r\n                    }\r\n                    node.addEventListener(prop, node[LISTENERS][prop][0]);\r\n                }\r\n                node[LISTENERS][prop][1] = nextValue;\r\n            }\r\n        } else if (prop in next) {\r\n            if ((prop in node && !isSvg) || (isSvg && prop === \"style\")) {\r\n                if (prop === \"style\") {\r\n                    if (typeof nextValue === \"object\") {\r\n                        let prevStyle = prevValue || {},\r\n                            nextStyle = nextValue;\r\n                        for (let prop in nextStyle) {\r\n                            if (prevStyle[prop] !== nextStyle[prop]) {\r\n                                if (prop[0] === \"-\") {\r\n                                    node.style.setProperty(\r\n                                        prop,\r\n                                        nextStyle[prop]\r\n                                    );\r\n                                } else {\r\n                                    node.style[prop] = nextStyle[prop];\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        node.style.cssText = nextValue;\r\n                    }\r\n                } else {\r\n                    node[prop] = nextValue;\r\n                }\r\n            } else {\r\n                isSvg\r\n                    ? node.setAttributeNS(null, prop, nextValue)\r\n                    : node.setAttribute(prop, nextValue);\r\n            }\r\n        } else {\r\n            node.removeAttribute(prop);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Issues the deletion of node and its children\r\n * @param {HTMLElement} node\r\n */\r\nexport function recollectNodeTree(node) {\r\n    let prev = node[PREVIOUS],\r\n        components = node[COMPONENTS],\r\n        children = node.childNodes,\r\n        length;\r\n\r\n    if (!prev) return;\r\n\r\n    node[REMOVE] = true;\r\n\r\n    emit(prev, \"remove\", node);\r\n\r\n    removeComponents(components);\r\n\r\n    length = children.length;\r\n    for (let i = 0; i < length; i++) {\r\n        recollectNodeTree(children[i]);\r\n    }\r\n\r\n    emit(prev, \"removed\", node);\r\n}\r\n\r\nexport function removeComponents(components) {\r\n    let length = components.length;\r\n    for (let i = 0; i < length; i++) {\r\n        let component = components[i],\r\n            effectsRemove = component.effects[1],\r\n            effectsLength = effectsRemove.length;\r\n        for (let i = 0; i < effectsLength; i++) {\r\n            if (effectsRemove[i]) effectsRemove[i]();\r\n        }\r\n    }\r\n}\r\n","export function create(tag, isSvg) {\r\n    if (tag) {\r\n        return isSvg\r\n            ? document.createElementNS(\"http://www.w3.org/2000/svg\", tag)\r\n            : document.createElement(tag);\r\n    } else {\r\n        return document.createTextNode(\"\");\r\n    }\r\n}\r\n\r\nexport function root(parent) {\r\n    return parent.shadowRoot || parent;\r\n}\r\nexport function remove(parent, child) {\r\n    parent.removeChild(child);\r\n}\r\n\r\nexport function append(parent, child) {\r\n    parent.appendChild(child);\r\n}\r\n\r\nexport function replace(parent, newChild, oldChild) {\r\n    parent.replaceChild(newChild, oldChild);\r\n}\r\n\r\nexport function before(parent, newChild, oldChild) {\r\n    parent.insertBefore(newChild, oldChild);\r\n}\r\n"],"names":["CURRENT_COMPONENT","CURRENT_KEY_STATE","VDom","tag","props","children","this","Object","key","root","parent","shadowRoot","remove","child","removeChild","append","appendChild","before","newChild","oldChild","insertBefore","clone","options","delay","COMPONENTS","PREVIOUS","REMOVE","LISTENERS","IGNORE","emit","vdom","prop","removed","ref","args","Component","isSvg","deep","currentComponents","states","effects","context","prevent","render","base","let","nextStateRender","diff","map","handler","node","nodeSibling","next","isCreate","component","prev","components","withUpdate","addContext","removeComponents","splice","document","createElementNS","createElement","createTextNode","create","firstChild","recollectNodeTree","replaceChild","replace","prevKeys","keys","nextKeys","concat","length","ignore","i","prevValue","nextValue","test","svg","attachShadow","mode","isFnPrev","isFnNext","all","letter","toLowerCase","removeEventListener","event","addEventListener","prevStyle","nextStyle","style","setProperty","cssText","setAttributeNS","setAttribute","removeAttribute","diffProps","nextParent","scoped","childNodes","childrenLength","childNodesLenght","childrenByKey","index","useKey","undefined","childNode","textContent","effectsRemove","effectsLength","value","Array","isArray","push","initialState","use","nextState","setTimeout"],"mappings":"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"}