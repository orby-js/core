{"version":3,"file":"orby.umd.js","sources":["../src/vdom.js","../src/dom.js","../src/diff.js"],"sourcesContent":["export class VDom {\r\n    /**\r\n     *\r\n     * @param {Function|String} tag - Node component or label\r\n     * @param {Object} props - Properties of the label\r\n     * @param {Array} children - Children assigned to the node\r\n     */\r\n    constructor(tag, props = {}, children = []) {\r\n        this.tag = tag;\r\n        this.props = {\r\n            ...props,\r\n            children\r\n        };\r\n    }\r\n    /**\r\n     * Clone the current node by keeping props and children by default\r\n     * @param {Function|String} tag -  Node component or label\r\n     * @param {*} props - Properties of the label\r\n     * @param {*} children - Children assigned to the node\r\n     */\r\n    clone(tag = this.tag, props = this.props, children = this.props.children) {\r\n        return new VDom(tag, props, children);\r\n    }\r\n    /**\r\n     * Dispatch an existing function in `this.props`\r\n     * @param {String} prop - Property to emit the virtual node only if it exists as a function\r\n     * @param  {...any} args - Arguments to be issued to the function\r\n     */\r\n    emit(prop, ...args) {\r\n        if (this.prevent) return;\r\n        if (prop === \"remove\") this.prevent = true;\r\n        if (typeof this.props[prop] === \"function\") this.props[prop](...args);\r\n    }\r\n}\r\n/**\r\n * Prepare the virtual node\r\n * @param {Function|String} tag\r\n * @param {Object} props\r\n * @param  {...any} children\r\n * @return {VDom}\r\n */\r\nexport function h(tag, props, ...children) {\r\n    return new VDom(tag || \"\", props, concat(children));\r\n}\r\n/**\r\n * Verify if this is a virtual node\r\n * @param {*} value\r\n * @return {Boolean}\r\n */\r\nexport function isVDom(value) {\r\n    return typeof value === \"object\" && value instanceof VDom;\r\n}\r\n/**\r\n * Clean existing values in virtual-dom tree\r\n * @param {*} children\r\n * @param {*} merge\r\n */\r\nexport function concat(children, merge = []) {\r\n    for (let i = 0; i < children.length; i++) {\r\n        let child = children[i];\r\n        Array.isArray(child)\r\n            ? concat(child, merge)\r\n            : merge.push(\r\n                  isVDom(child) ? child : new VDom(\"\", {}, [child || \"\"])\r\n              );\r\n    }\r\n    return merge;\r\n}\r\n","export function create(tag, isSvg) {\r\n    return isSvg\r\n        ? document.createElementNS(\"http://www.w3.org/2000/svg\", tag)\r\n        : tag\r\n            ? document.createElement(tag)\r\n            : document.createTextNode(\"\");\r\n}\r\n\r\nexport function root(parent) {\r\n    return parent.shadowRoot || parent;\r\n}\r\nexport function remove(parent, child) {\r\n    root(parent).removeChild(child);\r\n}\r\n\r\nexport function append(parent, child) {\r\n    root(parent).appendChild(child);\r\n}\r\n\r\nexport function replace(parent, newChild, oldChild) {\r\n    root(parent).replaceChild(newChild, oldChild);\r\n}\r\n","import { VDom, isVDom } from \"./vdom\";\r\nimport { create, remove, append, replace, root } from \"./dom\";\r\nexport { h, isVDom } from \"./vdom\";\r\n\r\n/**\r\n * Master is the mark to store the previous state\r\n * and if the node is controlled by one or more components\r\n */\r\nexport const MASTER = \"__master__\";\r\n/**\r\n * Each time a component is removed from the dom,\r\n * the property is marked as true\r\n */\r\nexport const REMOVE = \"__remove__\";\r\n/**\r\n * Special properties of virtual dom,\r\n * these are ignored from the diffProps process,\r\n * since it is part of the component's life cycle\r\n */\r\nexport const IGNORE = [\"children\", \"create\", \"remove\", \"context\", \"state\"];\r\n/**\r\n * It allows to print the status of virtual dom on the planned configuration\r\n * @param {VDom} next - the next state of the node\r\n * @param {HTMLElement} parent - the container of the node\r\n * @param {HTMLElement} [child]  - the ancestor of the node\r\n * @param {Object} [context] - the context of the node\r\n * @param {boolean} [isSvg] - check if the node belongs to a svg unit, to control it as such\r\n * @returns {HTMLElement} - The current node\r\n */\r\nexport function render(next, parent, child, context, isSvg) {\r\n    return diff(parent, child, next, context, isSvg);\r\n}\r\n/**\r\n * Gets the node's status mark\r\n * @param {HTMLElement} [base]\r\n * @return {object} - returns an object since the property associated\r\n *                    with the master in the whole diff is decomposed\r\n */\r\nexport function getMaster(base) {\r\n    return (base && base[MASTER]) || {};\r\n}\r\n/**\r\n *\r\n * @param {Function} component  - Function that controls the node\r\n * @param {*} [currentState] - The initial state of the component\r\n * @param {Boolean} [isSvg] - Create components for a group of svg\r\n * @return {HTMLElement} - Returns the current component node\r\n */\r\nexport function createComponent(component, currentState, isSvg) {\r\n    return function update(parent, base, props, context) {\r\n        return (base = render(\r\n            component(\r\n                props,\r\n                {\r\n                    /**\r\n                     * send a new status to update, to render the view\r\n                     * @param {*} - New state\r\n                     */\r\n                    set: state => {\r\n                        if (base[REMOVE]) return;\r\n                        currentState = state;\r\n                        base = update(parent, base, props, context);\r\n                    },\r\n                    get: () => currentState\r\n                },\r\n                context\r\n            ),\r\n            parent,\r\n            base,\r\n            context,\r\n            isSvg\r\n        ));\r\n    };\r\n}\r\n/**\r\n * It allows to print the status of virtual dom on the planned configuration\r\n * @param {HTMLElement} parent - the container of the node\r\n * @param {HTMLElement} [node]  - the ancestor of the node\r\n * @param {VDom} next - the next state of the node\r\n * @param {Object} [context] - the context of the node\r\n * @param {boolean} [isSvg] - check if the node belongs to a svg unit, to control it as such\r\n * @returns {HTMLElement} - The current node\r\n */\r\n\r\nexport function diff(parent, node, next, context = {}, isSvg) {\r\n    next = isVDom(next) ? next : new VDom(\"\", {}, [next || \"\"]);\r\n\r\n    let base = node,\r\n        { prev = new VDom(), components = new Map() } = getMaster(base),\r\n        component,\r\n        isCreate,\r\n        addContext = next.props.context;\r\n\r\n    context = addContext ? { ...context, ...addContext } : context;\r\n\r\n    isSvg = next.tag === \"svg\" || isSvg;\r\n\r\n    if (typeof next.tag === \"function\") {\r\n        component = next.tag;\r\n        if (!components.has(component)) {\r\n            components.set(\r\n                component,\r\n                createComponent(component, next.props.state, isSvg)\r\n            );\r\n        }\r\n        next = next.clone(prev.tag || (isSvg ? \"g\" : \"\"));\r\n    }\r\n\r\n    let children = next.props.children;\r\n\r\n    if (next.tag !== prev.tag) {\r\n        base = create(next.tag, isSvg);\r\n        if (node) {\r\n            if (!component && next.tag !== \"\") {\r\n                let length = children.length;\r\n                while (node.firstChild) {\r\n                    if (!length--) break;\r\n                    append(base, node.firstChild);\r\n                }\r\n            }\r\n            replace(parent, base, node);\r\n            emitRemove(node);\r\n        } else {\r\n            append(parent, base);\r\n        }\r\n        isCreate = true;\r\n        next.emit(\"create\", base);\r\n    }\r\n    if (component && components.has(component)) {\r\n        return components.get(component)(parent, base, next.props, context);\r\n    } else if (!next.tag) {\r\n        if (prev.props.children[0] !== next.props.children[0]) {\r\n            base.textContent = String(next.props.children[0]);\r\n        }\r\n    } else {\r\n        if (\r\n            isCreate ||\r\n            next.emit(\"update\", base, prev.props, next.props) !== false\r\n        ) {\r\n            diffProps(base, prev.props, next.props, isSvg);\r\n            let childNodes = Array.from(root(base).childNodes),\r\n                length = Math.max(childNodes.length, children.length);\r\n            for (let i = 0; i < length; i++) {\r\n                if (children[i]) {\r\n                    diff(base, childNodes[i], children[i], context, isSvg);\r\n                } else {\r\n                    if (childNodes[i]) {\r\n                        emitRemove(childNodes[i]);\r\n                        remove(base, childNodes[i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    base[MASTER] = {\r\n        prev: component ? getMaster(base).prev : next,\r\n        components\r\n    };\r\n\r\n    next.emit(isCreate ? \"created\" : \"updated\", base);\r\n\r\n    return base;\r\n}\r\n/**\r\n * Update or delete the attributes and events of a node\r\n * @param {HTMLElement} node - Node to assign changes\r\n * @param {Object} prev - Previous status of attributes\r\n * @param {Object} next - next status of attributes\r\n * @param {Boolean} [isSvg] - If it belongs to svg tree\r\n */\r\nexport function diffProps(node, prev, next, isSvg) {\r\n    let prevKeys = Object.keys(prev),\r\n        nextKeys = Object.keys(next).filter(\r\n            key => prevKeys.indexOf(key) === -1\r\n        ),\r\n        keys = prevKeys.concat(nextKeys);\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n        let prop = keys[i];\r\n\r\n        if (prev[prop] === next[prop] || IGNORE.indexOf(prop) > -1) continue;\r\n\r\n        let isFnPrev = typeof prev[prop] === \"function\",\r\n            isFnNext = typeof next[prop] === \"function\";\r\n\r\n        if (isFnPrev || isFnNext) {\r\n            if (isFnPrev) node.removeEventListener(prop, prev[prop]);\r\n            if (isFnNext) node.addEventListener(prop, next[prop]);\r\n        } else if (prop in next) {\r\n            if ((prop in node && !isSvg) || (isSvg && prop === \"style\")) {\r\n                if (prop === \"style\") {\r\n                    if (typeof next[prop] === \"object\") {\r\n                        let prevStyle = prev[prop] || {},\r\n                            nextStyle = next[prop];\r\n                        for (let prop in nextStyle) {\r\n                            if (prevStyle[prop] !== nextStyle[prop]) {\r\n                                if (prop[0] === \"-\") {\r\n                                    node.setProperty(prop, nextStyle[prop]);\r\n                                } else {\r\n                                    node.style[prop] = nextStyle[prop];\r\n                                }\r\n                            }\r\n                        }\r\n                        next[prop] = { ...prevStyle, ...nextStyle };\r\n                    } else {\r\n                        node.style.cssText = next[prop];\r\n                    }\r\n                } else {\r\n                    node[prop] = next[prop];\r\n                }\r\n            } else {\r\n                isSvg\r\n                    ? node.setAttributeNS(null, prop, next[prop])\r\n                    : node.setAttribute(prop, next[prop]);\r\n            }\r\n        } else {\r\n            node.removeAttribute(prop);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Issues the deletion of node and its children\r\n * @param {HTMLElement} base\r\n */\r\nexport function emitRemove(base) {\r\n    let { prev = new VDom() } = getMaster(base),\r\n        children = base.childNodes;\r\n    base[REMOVE] = true;\r\n    prev.emit(\"remove\", base);\r\n    for (let i = 0; i < children.length; i++) {\r\n        emitRemove(children[i]);\r\n    }\r\n    prev.emit(\"removed\", base);\r\n}\r\n"],"names":["VDom","constructor","tag","props","children","clone","this","emit","prop","args","prevent","isVDom","value","root","parent","shadowRoot","remove","child","removeChild","append","appendChild","MASTER","REMOVE","IGNORE","render","next","context","isSvg","diff","node","component","isCreate","base","prev","components","Map","getMaster","addContext","has","set","currentState","update","state","get","createComponent","document","createElementNS","createElement","createTextNode","create","length","firstChild","newChild","oldChild","replaceChild","replace","emitRemove","prevKeys","Object","keys","nextKeys","filter","key","indexOf","concat","i","isFnPrev","isFnNext","removeEventListener","addEventListener","prevStyle","nextStyle","setProperty","style","cssText","setAttributeNS","setAttribute","removeAttribute","diffProps","childNodes","Array","from","Math","max","textContent","String","merge","isArray","push"],"mappings":"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"}